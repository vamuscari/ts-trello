/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/actions/{id}": {
    /**
     * Get an Action 
     * @description Get an Action
     */
    get: operations["get-actions-id"];
    /**
     * Update an Action 
     * @description Update a specific Action. Only comment actions can be updated. Used to edit the content of a comment.
     */
    put: operations["put-actions-id"];
    /**
     * Delete an Action 
     * @description Delete a specific action. Only comment actions can be deleted.
     */
    delete: operations["delete-actions-id"];
    parameters: {
      path: {
        /** @description The ID of the Action */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/actions/{id}/{field}": {
    /**
     * Get a specific field on an Action 
     * @description Get a specific property of an action
     */
    get: operations["get-actions-id-field"];
  };
  "/actions/{id}/board": {
    /**
     * Get the Board for an Action 
     * @description Get the Board for an Action
     */
    get: operations["get-actions-id-board"];
  };
  "/actions/{id}/card": {
    /**
     * Get the Card for an Action 
     * @description Get the card for an action
     */
    get: operations["get-actions-id-card"];
  };
  "/actions/{id}/list": {
    /**
     * Get the List for an Action 
     * @description Get the List for an Action
     */
    get: operations["get-actions-id-list"];
  };
  "/actions/{id}/member": {
    /**
     * Get the Member of an Action 
     * @description Gets the member of an action (not the creator)
     */
    get: operations["get-actions-id-member"];
  };
  "/actions/{id}/memberCreator": {
    /**
     * Get the Member Creator of an Action 
     * @description Get the Member who created the Action
     */
    get: operations["get-actions-id-membercreator"];
  };
  "/actions/{id}/organization": {
    /**
     * Get the Organization of an Action 
     * @description Get the Organization of an Action
     */
    get: operations["get-actions-id-organization"];
  };
  "/actions/{id}/text": {
    /**
     * Update a Comment Action 
     * @description Update a comment action
     */
    put: operations["put-actions-id-text"];
  };
  "/actions/{idAction}/reactions": {
    /**
     * Get Action's Reactions 
     * @description List reactions for an action
     */
    get: operations["get-actions-idaction-reactions"];
    /**
     * Create Reaction for Action 
     * @description Adds a new reaction to an action
     */
    post: operations["post-actions-idaction-reactions"];
    parameters: {
      path: {
        /** @description The ID of the action */
        idAction: components["schemas"]["TrelloID"];
      };
    };
  };
  "/actions/{idAction}/reactions/{id}": {
    /**
     * Get Action's Reaction 
     * @description Get information for a reaction
     */
    get: operations["get-actions-idaction-reactions-id"];
    /**
     * Delete Action's Reaction 
     * @description Deletes a reaction
     */
    delete: operations["delete-actions-idaction-reactions-id"];
    parameters: {
      path: {
        /** @description The ID of the Action */
        idAction: components["schemas"]["TrelloID"];
        /** @description The ID of the reaction */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/actions/{idAction}/reactionsSummary": {
    /**
     * List Action's summary of Reactions 
     * @description List a summary of all reactions for an action
     */
    get: operations["get-actions-idaction-reactionsummary"];
  };
  "/applications/{key}/compliance": {
    /** Get Application's compliance data */
    get: operations["applications-key-compliance"];
    parameters: {
      path: {
        key: string;
      };
    };
  };
  "/batch": {
    /**
     * Batch Requests 
     * @description Make up to 10 GET requests in a single, batched API call.
     */
    get: operations["get-batch"];
  };
  "/boards/{id}/memberships": {
    /**
     * Get Memberships of a Board 
     * @description Get information about the memberships users have to the board.
     */
    get: operations["get-boards-id-memberships"];
  };
  "/boards/{id}": {
    /**
     * Get a Board 
     * @description Request a single board.
     */
    get: operations["get-boards-id"];
    /**
     * Update a Board 
     * @description Update an existing board by id
     */
    put: operations["put-boards-id"];
    /**
     * Delete a Board 
     * @description Delete a board.
     */
    delete: operations["delete-boards-id"];
    parameters: {
      path: {
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/boards/{id}/{field}": {
    /**
     * Get a field on a Board 
     * @description Get a single, specific field on a board
     */
    get: operations["get-boards-id-field"];
  };
  "/boards/{boardId}/actions": {
    /** Get Actions of a Board */
    get: operations["get-boards-id-actions"];
  };
  "/boards/{id}/cards/{idCard}": {
    /**
     * Get a Card on a Board 
     * @description Get a single Card on a Board.
     */
    get: operations["get-boards-id-cards-idcard"];
  };
  "/boards/{boardId}/boardStars": {
    /** Get boardStars on a Board */
    get: operations["get-boards-id-boardstars"];
  };
  "/boards/{id}/checklists": {
    /**
     * Get Checklists on a Board 
     * @description Get all of the checklists on a Board.
     */
    get: operations["boards-id-checklists"];
  };
  "/boards/{id}/cards": {
    /**
     * Get Cards on a Board 
     * @description Get all of the open Cards on a Board.
     */
    get: operations["get-boards-id-cards"];
  };
  "/boards/{id}/cards/{filter}": {
    /**
     * Get filtered Cards on a Board 
     * @description Get the Cards on a Board that match a given filter.
     */
    get: operations["get-boards-id-cards-filter"];
  };
  "/boards/{id}/customFields": {
    /**
     * Get Custom Fields for Board 
     * @description Get the Custom Field Definitions that exist on a board.
     */
    get: operations["get-boards-id-customfields"];
  };
  "/boards/{id}/labels": {
    /**
     * Get Labels on a Board 
     * @description Get all of the Labels on a Board.
     */
    get: operations["get-boards-id-labels"];
    /**
     * Create a Label on a Board 
     * @description Create a new Label on a Board.
     */
    post: operations["post-boards-id-labels"];
  };
  "/boards/{id}/lists": {
    /**
     * Get Lists on a Board 
     * @description Get the Lists on a Board
     */
    get: operations["get-boards-id-lists"];
    /**
     * Create a List on a Board 
     * @description Create a new List on a Board.
     */
    post: operations["post-boards-id-lists"];
    parameters: {
      path: {
        /** @description The ID of the board */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/boards/{id}/lists/{filter}": {
    /** Get filtered Lists on a Board */
    get: operations["get-boards-id-lists-filter"];
  };
  "/boards/{id}/members": {
    /**
     * Get the Members of a Board 
     * @description Get the Members for a board
     */
    get: operations["get-boards-id-members"];
    /**
     * Invite Member to Board via email 
     * @description Invite a Member to a Board via their email address.
     */
    put: operations["put-boards-id-members"];
    parameters: {
      path: {
        /** @description The ID of the board */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/boards/{id}/members/{idMember}": {
    /**
     * Add a Member to a Board 
     * @description Add a member to the board.
     */
    put: operations["put-boards-id-members-idmember"];
    /** Remove Member from Board */
    delete: operations["boardsidmembersidmember"];
    parameters: {
      path: {
        /** @description The id of the board to update */
        id: components["schemas"]["TrelloID"];
        /** @description The id of the member to add to the board. */
        idMember: components["schemas"]["TrelloID"];
      };
    };
  };
  "/boards/{id}/memberships/{idMembership}": {
    /**
     * Update Membership of Member on a Board 
     * @description Update an existing board by id
     */
    put: operations["put-boards-id-memberships-idmembership"];
  };
  "/boards/{id}/myPrefs/emailPosition": {
    /**
     * Update emailPosition Pref on a Board 
     * @description Update emailPosition Pref on a Board
     */
    put: operations["put-boards-id-myprefs-emailposition"];
  };
  "/boards/{id}/myPrefs/idEmailList": {
    /**
     * Update idEmailList Pref on a Board 
     * @description Change the default list that email-to-board cards are created in.
     */
    put: operations["put-boards-id-myprefs-idemaillist"];
  };
  "/boards/{id}/myPrefs/showListGuide": {
    /** Update showListGuide Pref on a Board */
    put: operations["put-boards-id-myPrefs-showlistguide"];
  };
  "/boards/{id}/myPrefs/showSidebar": {
    /** Update showSidebar Pref on a Board */
    put: operations["put-boards-id-myPrefs-showsidebar"];
  };
  "/boards/{id}/myPrefs/showSidebarActivity": {
    /** Update showSidebarActivity Pref on a Board */
    put: operations["put-boards-id-myPrefs-showsidebaractivity"];
  };
  "/boards/{id}/myPrefs/showSidebarBoardActions": {
    /** Update showSidebarBoardActions Pref on a Board */
    put: operations["put-boards-id-myPrefs-showsidebarboardactions"];
  };
  "/boards/{id}/myPrefs/showSidebarMembers": {
    /** Update showSidebarMembers Pref on a Board */
    put: operations["put-boards-id-myPrefs-showsidebarmembers"];
  };
  "/boards/": {
    /**
     * Create a Board 
     * @description Create a new board.
     */
    post: operations["post-boards"];
  };
  "/boards/{id}/calendarKey/generate": {
    /**
     * Create a calendarKey for a Board 
     * @description Create a new board.
     */
    post: operations["post-boards-id-calendarkey-generate"];
  };
  "/boards/{id}/emailKey/generate": {
    /** Create a emailKey for a Board */
    post: operations["post-boards-id-emailkey-generate"];
  };
  "/boards/{id}/idTags": {
    /** Create a Tag for a Board */
    post: operations["post-boards-id-idtags"];
  };
  "/boards/{id}/markedAsViewed": {
    /** Mark Board as viewed */
    post: operations["post-boards-id-markedasviewed"];
  };
  "/boards/{id}/boardPlugins": {
    /**
     * Get Enabled Power-Ups on Board 
     * @description Get the enabled Power-Ups on a board
     */
    get: operations["get-boards-id-boardplugins"];
    /**
     * Enable a Power-Up on a Board 
     * @deprecated 
     * @description Enable a Power-Up on a Board
     */
    post: operations["post-boards-id-boardplugins"];
    parameters: {
      path: {
        /** @description The ID of the Board */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/boards/{id}/boardPlugins/{idPlugin}": {
    /**
     * Disable a Power-Up on a Board 
     * @deprecated 
     * @description Disable a Power-Up on a board
     */
    delete: operations["delete-boards-id-boardplugins"];
  };
  "/boards/{id}/plugins": {
    /**
     * Get Power-Ups on a Board 
     * @description List the Power-Ups on a board
     */
    get: operations["get-board-id-plugins"];
  };
  "/cards": {
    /**
     * Create a new Card 
     * @description Create a new card
     */
    post: operations["post-cards"];
  };
  "/cards/{id}": {
    /**
     * Get a Card 
     * @description Get a card by its ID
     */
    get: operations["get-cards-id"];
    /**
     * Update a Card 
     * @description Update a card
     */
    put: operations["put-cards-id"];
    /**
     * Delete a Card 
     * @description Delete a Card
     */
    delete: operations["delete-cards-id"];
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/cards/{id}/{field}": {
    /**
     * Get a field on a Card 
     * @description Get a specific property of a card
     */
    get: operations["get-cards-id-field"];
  };
  "/cards/{id}/actions": {
    /**
     * Get Actions on a Card 
     * @description List the Actions on a Card
     */
    get: operations["get-cards-id-actions"];
  };
  "/cards/{id}/attachments": {
    /**
     * Get Attachments on a Card 
     * @description List the attachments on a card
     */
    get: operations["get-cards-id-attachments"];
    /**
     * Create Attachment On Card 
     * @description Create an Attachment to a Card
     */
    post: operations["post-cards-id-attachments"];
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/cards/{id}/attachments/{idAttachment}": {
    /**
     * Get an Attachment on a Card 
     * @description Get a specific Attachment on a Card.
     */
    get: operations["get-cards-id-attachments-idattachment"];
    /**
     * Delete an Attachment on a Card 
     * @description Delete an Attachment
     */
    delete: operations["deleted-cards-id-attachments-idattachment"];
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the Attachment */
        idAttachment: components["schemas"]["TrelloID"];
      };
    };
  };
  "/cards/{id}/board": {
    /**
     * Get the Board the Card is on 
     * @description Get the board a card is on
     */
    get: operations["get-cards-id-board"];
  };
  "/cards/{id}/checkItemStates": {
    /**
     * Get checkItems on a Card 
     * @description Get the completed checklist items on a card
     */
    get: operations["get-cards-id-checkitemstates"];
  };
  "/cards/{id}/checklists": {
    /**
     * Get Checklists on a Card 
     * @description Get the checklists on a card
     */
    get: operations["get-cards-id-checklists"];
    /**
     * Create Checklist on a Card 
     * @description Create a new checklist on a card
     */
    post: operations["post-cards-id-checklists"];
  };
  "/cards/{id}/checkItem/{idCheckItem}": {
    /**
     * Get checkItem on a Card 
     * @description Get a specific checkItem on a card
     */
    get: operations["get-cards-id-checkitem-idcheckitem"];
    /**
     * Update a checkItem on a Card 
     * @description Update an item in a checklist on a card.
     */
    put: operations["put-cards-id-checkitem-idcheckitem"];
    /**
     * Delete checkItem on a Card 
     * @description Delete a checklist item
     */
    delete: operations["delete-cards-id-checkitem-idcheckitem"];
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the checkitem */
        idCheckItem: components["schemas"]["TrelloID"];
      };
    };
  };
  "/cards/{id}/list": {
    /**
     * Get the List of a Card 
     * @description Get the list a card is in
     */
    get: operations["get-cards-id-list"];
  };
  "/cards/{id}/members": {
    /**
     * Get the Members of a Card 
     * @description Get the members on a card
     */
    get: operations["get-cards-id-members"];
  };
  "/cards/{id}/membersVoted": {
    /**
     * Get Members who have voted on a Card 
     * @description Get the members who have voted on a card
     */
    get: operations["get-cards-id-membersvoted"];
    /**
     * Add Member vote to Card 
     * @description Vote on the card for a given member.
     */
    post: operations["cardsidmembersvoted-1"];
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/cards/{id}/pluginData": {
    /**
     * Get pluginData on a Card 
     * @description Get any shared pluginData on a card.
     */
    get: operations["get-cards-id-plugindata"];
  };
  "/cards/{id}/stickers": {
    /**
     * Get Stickers on a Card 
     * @description Get the stickers on a card
     */
    get: operations["get-cards-id-stickers"];
    /**
     * Add a Sticker to a Card 
     * @description Add a sticker to a card
     */
    post: operations["post-cards-id-stickers"];
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/cards/{id}/stickers/{idSticker}": {
    /**
     * Get a Sticker on a Card 
     * @description Get a specific sticker on a card
     */
    get: operations["get-cards-id-stickers-idsticker"];
    /**
     * Update a Sticker on a Card 
     * @description Update a sticker on a card
     */
    put: operations["put-cards-id-stickers-idsticker"];
    /**
     * Delete a Sticker on a Card 
     * @description Remove a sticker from the card
     */
    delete: operations["delete-cards-id-stickers-idsticker"];
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the sticker */
        idSticker: components["schemas"]["TrelloID"];
      };
    };
  };
  "/cards/{id}/actions/{idAction}/comments": {
    /**
     * Update Comment Action on a Card 
     * @description Update an existing comment
     */
    put: operations["put-cards-id-actions-idaction-comments"];
    /**
     * Delete a comment on a Card 
     * @description Delete a comment
     */
    delete: operations["delete-cards-id-actions-id-comments"];
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the comment action to update */
        idAction: components["schemas"]["TrelloID"];
      };
    };
  };
  "/cards/{idCard}/customField/{idCustomField}/item": {
    /**
     * Update Custom Field item on Card 
     * @description Setting, updating, and removing the value for a Custom Field on a card. For more details on updating custom fields check out the [Getting Started With Custom Fields](/cloud/trello/guides/rest-api/getting-started-with-custom-fields/)
     */
    put: operations["put-cards-idcard-customfield-idcustomfield-item"];
  };
  "/cards/{id}/customFieldItems": {
    /**
     * Get Custom Field Items for a Card 
     * @description Get the custom field items for a card.
     */
    get: operations["get-cards-id-customfielditems"];
  };
  "/cards/{id}/actions/comments": {
    /**
     * Add a new comment to a Card 
     * @description Add a new comment to a card
     */
    post: operations["post-cards-id-actions-comments"];
  };
  "/cards/{id}/idLabels": {
    /**
     * Add a Label to a Card 
     * @description Add a label to a card
     */
    post: operations["post-cards-id-idlabels"];
  };
  "/cards/{id}/idMembers": {
    /**
     * Add a Member to a Card 
     * @description Add a member to a card
     */
    post: operations["post-cards-id-idmembers"];
  };
  "/cards/{id}/labels": {
    /**
     * Create a new Label on a Card 
     * @description Create a new label for the board and add it to the given card.
     */
    post: operations["post-cards-id-labels"];
  };
  "/cards/{id}/markAssociatedNotificationsRead": {
    /**
     * Mark a Card's Notifications as read 
     * @description Mark notifications about this card as read
     */
    post: operations["post-cards-id-markassociatednotificationsread"];
  };
  "/cards/{id}/idLabels/{idLabel}": {
    /**
     * Remove a Label from a Card 
     * @description Remove a label from a card
     */
    delete: operations["delete-cards-id-idlabels-idlabel"];
  };
  "/cards/{id}/idMembers/{idMember}": {
    /**
     * Remove a Member from a Card 
     * @description Remove a member from a card
     */
    delete: operations["delete-id-idmembers-idmember"];
  };
  "/cards/{id}/membersVoted/{idMember}": {
    /**
     * Remove a Member's Vote on a Card 
     * @description Remove a member's vote from a card
     */
    delete: operations["delete-cards-id-membersvoted-idmember"];
  };
  "/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}": {
    /**
     * Update Checkitem on Checklist on Card 
     * @description Update an item in a checklist on a card.
     */
    put: operations["put-cards-idcard-checklist-idchecklist-checkitem-idcheckitem"];
  };
  "/cards/{id}/checklists/{idChecklist}": {
    /**
     * Delete a Checklist on a Card 
     * @description Delete a checklist from a card
     */
    delete: operations["delete-cards-id-checklists-idchecklist"];
  };
  "/checklists": {
    /** Create a Checklist */
    post: operations["post-checklists"];
  };
  "/checklists/{id}": {
    /** Get a Checklist */
    get: operations["get-checklists-id"];
    /**
     * Update a Checklist 
     * @description Update an existing checklist.
     */
    put: operations["put-checlists-id"];
    /**
     * Delete a Checklist 
     * @description Delete a checklist
     */
    delete: operations["delete-checklists-id"];
    parameters: {
      path: {
        /** @description ID of a checklist. */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/checklists/{id}/{field}": {
    /** Get field on a Checklist */
    get: operations["get-checklists-id-field"];
    /** Update field on a Checklist */
    put: operations["put-checklists-id-field"];
    parameters: {
      path: {
        /** @description ID of a checklist. */
        id: components["schemas"]["TrelloID"];
        /** @description Field to update. */
        field: "name" | "pos";
      };
    };
  };
  "/checklists/{id}/board": {
    /** Get the Board the Checklist is on */
    get: operations["get-checklists-id-board"];
  };
  "/checklists/{id}/cards": {
    /** Get the Card a Checklist is on */
    get: operations["get-checklists-id-cards"];
  };
  "/checklists/{id}/checkItems": {
    /** Get Checkitems on a Checklist */
    get: operations["get-checklists-id-checkitems"];
    /** Create Checkitem on Checklist */
    post: operations["post-checklists-id-checkitems"];
    parameters: {
      path: {
        /** @description ID of a checklist. */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/checklists/{id}/checkItems/{idCheckItem}": {
    /** Get a Checkitem on a Checklist */
    get: operations["get-checklists-id-checkitems-idcheckitem"];
    /**
     * Delete Checkitem from Checklist 
     * @description Remove an item from a checklist
     */
    delete: operations["delete-checklists-id-checkitems-idcheckitem"];
    parameters: {
      path: {
        /** @description ID of a checklist. */
        id: components["schemas"]["TrelloID"];
        /** @description ID of the check item to retrieve. */
        idCheckItem: components["schemas"]["TrelloID"];
      };
    };
  };
  "/customFields": {
    /**
     * Create a new Custom Field on a Board 
     * @description Create a new Custom Field on a board.
     */
    post: operations["post-customfields"];
  };
  "/customFields/{id}": {
    /** Get a Custom Field */
    get: operations["get-customfields-id"];
    /**
     * Update a Custom Field definition 
     * @description Update a Custom Field definition.
     */
    put: operations["put-customfields-id"];
    /**
     * Delete a Custom Field definition 
     * @description Delete a Custom Field from a board.
     */
    delete: operations["delete-customfields-id"];
    parameters: {
      path: {
        /** @description ID of the Custom Field. */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/customFields/{id}/options": {
    /**
     * Get Options of Custom Field drop down 
     * @description Get the options of a drop down Custom Field
     */
    get: operations["post-customfields-id-options"];
    /**
     * Add Option to Custom Field dropdown 
     * @description Add an option to a dropdown Custom Field
     */
    post: operations["get-customfields-id-options"];
    parameters: {
      path: {
        /** @description ID of the customfield. */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/customFields/{id}/options/{idCustomFieldOption}": {
    /**
     * Get Option of Custom Field dropdown 
     * @description Retrieve a specific, existing Option on a given dropdown-type Custom Field
     */
    get: operations["get-customfields-options-idcustomfieldoption"];
    /**
     * Delete Option of Custom Field dropdown 
     * @description Delete an option from a Custom Field dropdown.
     */
    delete: operations["delete-customfields-options-idcustomfieldoption"];
    parameters: {
      path: {
        /** @description ID of the customfielditem. */
        id: components["schemas"]["TrelloID"];
        /** @description ID of the customfieldoption to retrieve. */
        idCustomFieldOption: components["schemas"]["TrelloID"];
      };
    };
  };
  "/emoji": {
    /**
     * List available Emoji 
     * @description List available Emoji
     */
    get: operations["emoji"];
  };
  "/enterprises/{id}": {
    /**
     * Get an Enterprise 
     * @description Get an enterprise by its ID.
     */
    get: operations["get-enterprises-id"];
  };
  "/enterprises/{id}/auditlog": {
    /**
     * Get auditlog data for an Enterprise 
     * @description Returns an array of Actions related to the Enterprise object. Used for populating data sent to Google Sheets from an Enterprise's audit log page: https://trello.com/e/{enterprise_name}/admin/auditlog. An Enterprise admin token is required for this route. 
     * 
     *  NOTE: For enterprises that have opted in to user management via AdminHub, the auditlog will will contain actions taken in AdminHub, but may not contain the source for those actions.
     */
    get: operations["get-enterprises-id-auditlog"];
  };
  "/enterprises/{id}/admins": {
    /**
     * Get Enterprise admin Members 
     * @description Get an enterprise's admin members.
     */
    get: operations["get-enterprises-id-admins"];
  };
  "/enterprises/{id}/signupUrl": {
    /**
     * Get signupUrl for Enterprise 
     * @description Get the signup URL for an enterprise.
     */
    get: operations["get-enterprises-id-signupurl"];
  };
  "/enterprises/{id}/members": {
    /**
     * Get Members of Enterprise 
     * @description Get the members of an enterprise.
     */
    get: operations["get-enterprises-id-members"];
  };
  "/enterprises/{id}/members/{idMember}": {
    /**
     * Get a Member of Enterprise 
     * @description Get a specific member of an enterprise by ID.
     */
    get: operations["get-enterprises-id-members-idmember"];
  };
  "/enterprises/{id}/transferrable/organization/{idOrganization}": {
    /**
     * Get whether an organization can be transferred to an enterprise. 
     * @description Get whether an organization can be transferred to an enterprise.
     */
    get: operations["get-enterprises-id-transferrable-organization-idOrganization"];
  };
  "/enterprises/{id}/transferrable/bulk/{idOrganizations}": {
    /**
     * Get a bulk list of organizations that can be transferred to an enterprise. 
     * @description Get a list of organizations that can be transferred to an enterprise when given a bulk list of organizations.
     */
    get: operations["get-enterprises-id-transferrable-bulk-idOrganizations"];
  };
  "/enterprises/${id}/enterpriseJoinRequest/bulk": {
    /**
     * Decline enterpriseJoinRequests from one organization or a bulk list of organizations. 
     * @description Decline enterpriseJoinRequests from one organization or bulk amount of organizations
     */
    put: operations["put-enterprises-id-enterpriseJoinRequest-bulk"];
  };
  "/enterprises/{id}/claimableOrganizations": {
    /**
     * Get ClaimableOrganizations of an Enterprise 
     * @description Get the Workspaces that are claimable by the enterprise by ID. Can optionally query for workspaces based on activeness/ inactiveness.
     */
    get: operations["get-enterprises-id-claimableOrganizations"];
  };
  "/enterprises/{id}/pendingOrganizations": {
    /**
     * Get PendingOrganizations of an Enterprise 
     * @description Get the Workspaces that are pending for the enterprise by ID.
     */
    get: operations["get-enterprises-id-pendingOrganizations"];
  };
  "/enterprises/{id}/tokens": {
    /**
     * Create an auth Token for an Enterprise. 
     * @description Create an auth Token for an Enterprise.
     */
    post: operations["post-enterprises-id-tokens"];
  };
  "/enterprises/{id}/organizations": {
    /**
     * Transfer an Organization to an Enterprise. 
     * @description Transfer an organization to an enterprise.
     * 
     *  NOTE: For enterprises that have opted in to user management via AdminHub, this endpoint will result in the organization being added to the enterprise asynchronously. A 200 response only indicates receipt of the request, it does not indicate successful addition to the enterprise.
     */
    put: operations["put-enterprises-id-organizations"];
  };
  "/enterprises/{id}/members/{idMember}/licensed": {
    /**
     * Update a Member's licensed status 
     * @description This endpoint is used to update whether the provided Member should use one of the Enterprise's available licenses or not. Revoking a license will deactivate a Member of an Enterprise. 
     * 
     *  NOTE: Revoking of licenses is not possible for enterprises that have opted in to user management via AdminHub.
     */
    put: operations["put-enterprises-id-members-idmember-licensed"];
  };
  "/enterprises/{id}/members/{idMember}/deactivated": {
    /**
     * Deactivate a Member of an Enterprise. 
     * @description Deactivate a Member of an Enterprise.
     * 
     *  NOTE: Deactivation is not possible for enterprises that have opted in to user management via AdminHub.
     */
    put: operations["enterprises-id-members-idMember-deactivated"];
  };
  "/enterprises/{id}/admins/{idMember}": {
    /**
     * Update Member to be admin of Enterprise 
     * @description Make Member an admin of Enterprise.
     * 
     *  NOTE: This endpoint is not available to enterprises that have opted in to user management via AdminHub.
     */
    put: operations["put-enterprises-id-admins-idmember"];
    /**
     * Remove a Member as admin from Enterprise. 
     * @description Remove a member as admin from an enterprise.
     * 
     *  NOTE: This endpoint is not available to enterprises that have opted in to user management via AdminHub.
     */
    delete: operations["enterprises-id-organizations-idmember"];
  };
  "/enterprises/{id}/organizations/{idOrg}": {
    /**
     * Delete an Organization from an Enterprise. 
     * @description Remove an organization from an enterprise.
     */
    delete: operations["delete-enterprises-id-organizations-idorg"];
  };
  "/enterprises/{id}/organizations/bulk/{idOrganizations}": {
    /**
     * Bulk accept a set of organizations to an Enterprise. 
     * @description Accept an array of organizations to an enterprise.
     * 
     *  NOTE: For enterprises that have opted in to user management via AdminHub, this endpoint will result in organizations being added to the enterprise asynchronously. A 200 response only indicates receipt of the request, it does not indicate successful addition to the enterprise.
     */
    get: operations["get-enterprises-id-organizations-bulk-idOrganizations"];
  };
  "/labels/{id}": {
    /**
     * Get a Label 
     * @description Get information about a single Label.
     */
    get: operations["get-labels-id"];
    /**
     * Update a Label 
     * @description Update a label by ID.
     */
    put: operations["put-labels-id"];
    /**
     * Delete a Label 
     * @description Delete a label by ID.
     */
    delete: operations["delete-labels-id"];
    parameters: {
      path: {
        /** @description The ID of the Label */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/labels/{id}/{field}": {
    /**
     * Update a field on a label 
     * @description Update a field on a label.
     */
    put: operations["put-labels-id-field"];
  };
  "/labels": {
    /**
     * Create a Label 
     * @description Create a new Label on a Board.
     */
    post: operations["post-labels"];
  };
  "/lists/{id}": {
    /**
     * Get a List 
     * @description Get information about a List
     */
    get: operations["get-lists-id"];
    /**
     * Update a List 
     * @description Update the properties of a List
     */
    put: operations["put-lists-id"];
    parameters: {
      path: {
        /** @description The ID of the list */
        id: string;
      };
    };
  };
  "/lists": {
    /**
     * Create a new List 
     * @description Create a new List on a Board
     */
    post: operations["post-lists"];
  };
  "/lists/{id}/archiveAllCards": {
    /**
     * Archive all Cards in List 
     * @description Archive all cards in a list
     */
    post: operations["post-lists-id-archiveallcards"];
  };
  "/lists/{id}/moveAllCards": {
    /**
     * Move all Cards in List 
     * @description Move all Cards in a List
     */
    post: operations["post-lists-id-moveallcards"];
  };
  "/lists/{id}/closed": {
    /**
     * Archive or unarchive a list 
     * @description Archive or unarchive a list
     */
    put: operations["put-lists-id-closed"];
  };
  "/lists/{id}/idBoard": {
    /**
     * Move List to Board 
     * @description Move a List to a different Board
     */
    put: operations["put-id-idboard"];
  };
  "/lists/{id}/{field}": {
    /**
     * Update a field on a List 
     * @description Rename a list
     */
    put: operations["put-lists-id-field"];
  };
  "/lists/{id}/actions": {
    /**
     * Get Actions for a List 
     * @description Get the Actions on a List
     */
    get: operations["get-lists-id-actions"];
  };
  "/lists/{id}/board": {
    /**
     * Get the Board a List is on 
     * @description Get the board a list is on
     */
    get: operations["get-lists-id-board"];
  };
  "/lists/{id}/cards": {
    /**
     * Get Cards in a List 
     * @description List the cards in a list
     */
    get: operations["get-lists-id-cards"];
  };
  "/members/{id}": {
    /**
     * Get a Member 
     * @description Get a member
     */
    get: operations["get-members=id"];
    /**
     * Update a Member 
     * @description Update a Member
     */
    put: operations["put-members-id"];
  };
  "/members/{id}/{field}": {
    /**
     * Get a field on a Member 
     * @description Get a particular property of a member
     */
    get: operations["get-members-id-field"];
  };
  "/members/{id}/actions": {
    /**
     * Get a Member's Actions 
     * @description List the actions for a member
     */
    get: operations["get-members-id-actions"];
  };
  "/members/{id}/boardBackgrounds": {
    /**
     * Get Member's custom Board backgrounds 
     * @description Get a member's custom board backgrounds
     */
    get: operations["get-members-id-boardbackgrounds"];
    /**
     * Upload new boardBackground for Member 
     * @description Upload a new boardBackground
     */
    post: operations["post-members-id-boardbackgrounds-1"];
  };
  "/members/{id}/boardBackgrounds/{idBackground}": {
    /**
     * Get a boardBackground of a Member 
     * @description Get a member's board background
     */
    get: operations["get-members-id-boardbackgrounds-idbackground"];
    /**
     * Update a Member's custom Board background 
     * @description Update a board background
     */
    put: operations["put-members-id-boardbackgrounds-idbackground"];
    /**
     * Delete a Member's custom Board background 
     * @description Delete a board background
     */
    delete: operations["delete-members-id-boardbackgrounds-idbackground"];
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the board background */
        idBackground: components["schemas"]["TrelloID"];
      };
    };
  };
  "/members/{id}/boardStars": {
    /**
     * Get a Member's boardStars 
     * @description List a member's board stars
     */
    get: operations["get-members-id-boardstars"];
    /**
     * Create Star for Board 
     * @description Star a new board on behalf of a Member
     */
    post: operations["post-members-id-boardstars"];
  };
  "/members/{id}/boardStars/{idStar}": {
    /**
     * Get a boardStar of Member 
     * @description Get a specific boardStar
     */
    get: operations["get-members-id-boardstars-idstar"];
    /**
     * Update the position of a boardStar of Member 
     * @description Update the position of a starred board
     */
    put: operations["put-members-id-boardstars-idstar"];
    /**
     * Delete Star for Board 
     * @description Unstar a board
     */
    delete: operations["delete-members-id-boardstars-idstar"];
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the board star */
        idStar: components["schemas"]["TrelloID"];
      };
    };
  };
  "/members/{id}/boards": {
    /**
     * Get Boards that Member belongs to 
     * @description Lists the boards that the user is a member of.
     */
    get: operations["get-members-id-boards"];
  };
  "/members/{id}/boardsInvited": {
    /**
     * Get Boards the Member has been invited to 
     * @description Get the boards the member has been invited to
     */
    get: operations["get-members-id-boardsinvited"];
  };
  "/members/{id}/cards": {
    /**
     * Get Cards the Member is on 
     * @description Gets the cards a member is on
     */
    get: operations["get-members-id-cards"];
  };
  "/members/{id}/customBoardBackgrounds": {
    /**
     * Get a Member's custom Board Backgrounds 
     * @description Get a member's custom board backgrounds
     */
    get: operations["get-members-id-customboardbackgrounds"];
    /**
     * Create a new custom Board Background 
     * @description Upload a new custom board background
     */
    post: operations["membersidcustomboardbackgrounds-1"];
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/members/{id}/customBoardBackgrounds/{idBackground}": {
    /**
     * Get custom Board Background of Member 
     * @description Get a specific custom board background
     */
    get: operations["get-members-id-customboardbackgrounds-idbackground"];
    /**
     * Update custom Board Background of Member 
     * @description Update a specific custom board background
     */
    put: operations["put-members-id-customboardbackgrounds-idbackground"];
    /**
     * Delete custom Board Background of Member 
     * @description Delete a specific custom board background
     */
    delete: operations["delete-members-id-customboardbackgrounds-idbackground"];
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"] | string;
        /** @description The ID of the custom background */
        idBackground: components["schemas"]["TrelloID"];
      };
    };
  };
  "/members/{id}/customEmoji": {
    /**
     * Get a Member's customEmojis 
     * @description Get a Member's uploaded custom Emojis
     */
    get: operations["get-members-id-customemoji"];
    /**
     * Create custom Emoji for Member 
     * @description Create a new custom Emoji
     */
    post: operations["post-members-id-customemoji"];
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/members/{id}/customEmoji/{idEmoji}": {
    /**
     * Get a Member's custom Emoji 
     * @description Get a Member's custom Emoji
     */
    get: operations["membersidcustomemojiidemoji"];
  };
  "/members/{id}/customStickers": {
    /**
     * Get Member's custom Stickers 
     * @description Get a Member's uploaded stickers
     */
    get: operations["get-members-id-customstickers"];
    /**
     * Create custom Sticker for Member 
     * @description Upload a new custom sticker
     */
    post: operations["post-members-id-customstickers"];
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/members/{id}/customStickers/{idSticker}": {
    /**
     * Get a Member's custom Sticker 
     * @description Get a Member's custom Sticker
     */
    get: operations["get-members-id-customstickers-idsticker"];
    /**
     * Delete a Member's custom Sticker 
     * @description Delete a Member's custom Sticker
     */
    delete: operations["delete-members-id-customstickers-idsticker"];
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the uploaded sticker */
        idSticker: components["schemas"]["TrelloID"];
      };
    };
  };
  "/members/{id}/notifications": {
    /**
     * Get Member's Notifications 
     * @description Get a member's notifications
     */
    get: operations["get-members-id-notifications"];
  };
  "/members/{id}/organizations": {
    /**
     * Get Member's Organizations 
     * @description Get a member's Workspaces
     */
    get: operations["get-members-id-organizations"];
  };
  "/members/{id}/organizationsInvited": {
    /**
     * Get Organizations a Member has been invited to 
     * @description Get a member's Workspaces they have been invited to
     */
    get: operations["get-members-id-organizationsinvited"];
  };
  "/members/{id}/savedSearches": {
    /**
     * Get Member's saved searched 
     * @description List the saved searches of a Member
     */
    get: operations["get-members-id-savedsearches"];
    /**
     * Create saved Search for Member 
     * @description Create a saved search
     */
    post: operations["post-members-id-savedsearches"];
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/members/{id}/savedSearches/{idSearch}": {
    /**
     * Get a saved search 
     * @description Get a saved search
     */
    get: operations["get-members-id-savedsearches-idsearch"];
    /**
     * Update a saved search 
     * @description Update a saved search
     */
    put: operations["put-members-id-savedsearches-idsearch"];
    /**
     * Delete a saved search 
     * @description Delete a saved search
     */
    delete: operations["delete-members-id-savedsearches-idsearch"];
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: string;
        /** @description The ID of the saved search to delete */
        idSearch: string;
      };
    };
  };
  "/members/{id}/tokens": {
    /**
     * Get Member's Tokens 
     * @description List a members app tokens
     */
    get: operations["get-members-id-tokens"];
  };
  "/members/{id}/avatar": {
    /**
     * Create Avatar for Member 
     * @description Create a new avatar for a member
     */
    post: operations["membersidavatar"];
  };
  "/members/{id}/oneTimeMessagesDismissed": {
    /**
     * Dismiss a message for Member 
     * @description Dismiss a message
     */
    post: operations["post-members-id-onetimemessagesdismissed"];
  };
  "/members/{id}/notificationsChannelSettings": {
    /**
     * Get a Member's notification channel settings 
     * @description Get a member's notification channel settings
     */
    get: operations["get-members-id-notificationChannelSettings"];
    /**
     * Update blocked notification keys of Member on a channel 
     * @description Update blocked notification keys of Member on a specific channel
     */
    put: operations["put-members-id-notificationChannelSettings-channel-blockedKeys"];
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"] | string;
      };
    };
  };
  "/members/{id}/notificationsChannelSettings/{channel}": {
    /**
     * Get blocked notification keys of Member on this channel 
     * @description Get blocked notification keys of Member on a specific channel
     */
    get: operations["get-members-id-notificationChannelSettings-channel"];
    /**
     * Update blocked notification keys of Member on a channel 
     * @description Update blocked notification keys of Member on a specific channel
     */
    put: operations["put-members-id-notificationChannelSettings-channel-blockedKeys"];
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"] | string;
        /** @description Channel to block notifications on */
        channel: components["schemas"]["Channel"];
      };
    };
  };
  "/members/{id}/notificationsChannelSettings/{channel}/{blockedKeys}": {
    /**
     * Update blocked notification keys of Member on a channel 
     * @description Update blocked notification keys of Member on a specific channel
     */
    put: operations["put-members-id-notificationChannelSettings-channel-blockedKeys"];
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"] | string;
        /** @description Channel to block notifications on */
        channel: components["schemas"]["Channel"];
        /** @description Singular key or comma-separated list of notification keys */
        blockedKeys: components["schemas"]["BlockedKey"];
      };
    };
  };
  "/notifications/{id}": {
    /** Get a Notification */
    get: operations["get-notifications-id"];
    /**
     * Update a Notification's read status 
     * @description Update the read status of a notification
     */
    put: operations["put-notifications-id"];
  };
  "/notifications/{id}/{field}": {
    /**
     * Get a field of a Notification 
     * @description Get a specific property of a notification
     */
    get: operations["get-notifications-id-field"];
  };
  "/notifications/all/read": {
    /**
     * Mark all Notifications as read 
     * @description Mark all notifications as read
     */
    post: operations["post-notifications-all-read"];
  };
  "/notifications/{id}/unread": {
    /**
     * Update Notification's read status 
     * @description Update Notification's read status
     */
    put: operations["put-notifications-id-unread"];
  };
  "/notifications/{id}/board": {
    /**
     * Get the Board a Notification is on 
     * @description Get the board a notification is associated with
     */
    get: operations["get-notifications-id-board"];
  };
  "/notifications/{id}/card": {
    /**
     * Get the Card a Notification is on 
     * @description Get the card a notification is associated with
     */
    get: operations["get-notifications-id-card"];
  };
  "/notifications/{id}/list": {
    /**
     * Get the List a Notification is on 
     * @description Get the list a notification is associated with
     */
    get: operations["get-notifications-id-list"];
  };
  "/notifications/{id}/member": {
    /**
     * Get the Member a Notification is about (not the creator) 
     * @description Get the member (not the creator) a notification is about
     */
    get: operations["notificationsidmember"];
  };
  "/notifications/{id}/memberCreator": {
    /**
     * Get the Member who created the Notification 
     * @description Get the member who created the notification
     */
    get: operations["get-notifications-id-membercreator"];
  };
  "/notifications/{id}/organization": {
    /**
     * Get a Notification's associated Organization 
     * @description Get the organization a notification is associated with
     */
    get: operations["get-notifications-id-organization"];
  };
  "/organizations": {
    /**
     * Create a new Organization 
     * @description Create a new Workspace
     */
    post: operations["post-organizations"];
  };
  "/organizations/{id}": {
    /** Get an Organization */
    get: operations["get-organizations-id"];
    /**
     * Update an Organization 
     * @description Update an organization
     */
    put: operations["put-organizations-id"];
    /**
     * Delete an Organization 
     * @description Delete an Organization
     */
    delete: operations["delete-organizations-id"];
    parameters: {
      path: {
        /** @description The ID or name of the Organization */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/organizations/{id}/{field}": {
    /** Get field on Organization */
    get: operations["get-organizations-id-field"];
  };
  "/organizations/{id}/actions": {
    /**
     * Get Actions for Organization 
     * @description List the actions on a Workspace
     */
    get: operations["get-organizations-id-actions"];
  };
  "/organizations/{id}/boards": {
    /**
     * Get Boards in an Organization 
     * @description List the boards in a Workspace
     */
    get: operations["get-organizations-id-boards"];
  };
  "/organizations/{id}/exports": {
    /**
     * Retrieve Organization's Exports 
     * @description Retrieve the exports that exist for the given organization
     */
    get: operations["get-organizations-id-exports"];
    /**
     * Create Export for Organizations 
     * @description Kick off CSV export for an organization
     */
    post: operations["post-organizations-id-exports"];
    parameters: {
      path: {
        /** @description The ID or name of the Workspace */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/organizations/{id}/members": {
    /**
     * Get the Members of an Organization 
     * @description List the members in a Workspace
     */
    get: operations["get-organizations-id-members"];
    /** Update an Organization's Members */
    put: operations["put-organizations-id-members"];
  };
  "/organizations/{id}/memberships": {
    /**
     * Get Memberships of an Organization 
     * @description List the memberships of a Workspace
     */
    get: operations["get-organizations-id-memberships"];
  };
  "/organizations/{id}/memberships/{idMembership}": {
    /**
     * Get a Membership of an Organization 
     * @description Get a single Membership for an Organization
     */
    get: operations["get-organizations-id-memberships-idmembership"];
  };
  "/organizations/{id}/pluginData": {
    /**
     * Get the pluginData Scoped to Organization 
     * @description Get organization scoped pluginData on this Workspace
     */
    get: operations["get-organizations-id-plugindata"];
  };
  "/organizations/{id}/tags": {
    /**
     * Get Tags of an Organization 
     * @description List the organization's collections
     */
    get: operations["get-organizations-id-tags"];
    /**
     * Create a Tag in Organization 
     * @description Create a Tag in an Organization
     */
    post: operations["post-organizations-id-tags"];
    parameters: {
      path: {
        /** @description The ID or name of the Organization */
        id: string | components["schemas"]["TrelloID"];
      };
    };
  };
  "/organizations/{id}/members/{idMember}": {
    /**
     * Update a Member of an Organization 
     * @description Add a member to a Workspace or update their member type.
     */
    put: operations["put-organizations-id-members-idmember"];
    /**
     * Remove a Member from an Organization 
     * @description Remove a member from a Workspace
     */
    delete: operations["delete-organizations-id-members"];
  };
  "/organizations/{id}/members/{idMember}/deactivated": {
    /**
     * Deactivate or reactivate a member of an Organization 
     * @description Deactivate or reactivate a member of a Workspace
     */
    put: operations["put-organizations-id-members-idmember-deactivated"];
  };
  "/organizations/{id}/logo": {
    /**
     * Update logo for an Organization 
     * @description Set the logo image for a Workspace
     */
    post: operations["post-organizations-id-logo"];
    /**
     * Delete Logo for Organization 
     * @description Delete a the logo from a Workspace
     */
    delete: operations["delete-organizations-id-logo"];
  };
  "/organizations/{id}/members/{idMember}/all": {
    /**
     * Remove a Member from an Organization and all Organization Boards 
     * @description Remove a member from a Workspace and from all Workspace boards
     */
    delete: operations["organizations-id-members-idmember-all"];
  };
  "/organizations/{id}/prefs/associatedDomain": {
    /**
     * Remove the associated Google Apps domain from a Workspace 
     * @description Remove the associated Google Apps domain from a Workspace
     */
    delete: operations["delete-organizations-id-prefs-associateddomain"];
  };
  "/organizations/{id}/prefs/orgInviteRestrict": {
    /**
     * Delete the email domain restriction on who can be invited to the Workspace 
     * @description Remove the email domain restriction on who can be invited to the Workspace
     */
    delete: operations["delete-organizations-id-prefs-orginviterestrict"];
  };
  "/organizations/{id}/tags/{idTag}": {
    /**
     * Delete an Organization's Tag 
     * @description Delete an organization's tag
     */
    delete: operations["delete-organizations-id-tags-idtag"];
  };
  "/organizations/{id}/newBillableGuests/{idBoard}": {
    /**
     * Get Organizations new billable guests 
     * @description Used to check whether the given board has new billable guests on it.
     */
    get: operations["get-organizations-id-newbillableguests-idboard"];
  };
  "/plugins/{id}/": {
    /**
     * Get a Plugin 
     * @description Get plugins
     */
    get: operations["get-plugins-id"];
    /**
     * Update a Plugin 
     * @description Update a Plugin
     */
    put: operations["put-plugins-id"];
  };
  "/plugins/{idPlugin}/listing": {
    /**
     * Create a Listing for Plugin 
     * @description Create a new listing for a given locale for your Power-Up
     */
    post: operations["post-plugins-idplugin-listing"];
  };
  "/plugins/{id}/compliance/memberPrivacy": {
    /** Get Plugin's Member privacy compliance */
    get: operations["get-plugins-id-compliance-memberprivacy"];
  };
  "/plugins/{idPlugin}/listings/{idListing}": {
    /**
     * Updating Plugin's Listing 
     * @description Update an existing listing for your Power-Up
     */
    put: operations["put-plugins-idplugin-listings-idlisting"];
  };
  "/search": {
    /**
     * Search Trello 
     * @description Find what you're looking for in Trello
     */
    get: operations["get-search"];
  };
  "/search/members/": {
    /**
     * Search for Members 
     * @description Search for Trello members.
     */
    get: operations["get-search-members"];
  };
  "/tokens/{token}": {
    /**
     * Get a Token 
     * @description Retrieve information about a token.
     */
    get: operations["get-tokens-token"];
  };
  "/tokens/{token}/member": {
    /**
     * Get Token's Member 
     * @description Retrieve information about a token's owner by token.
     */
    get: operations["get-tokens-token-member"];
  };
  "/tokens/{token}/webhooks": {
    /**
     * Get Webhooks for Token 
     * @description Retrieve all webhooks created with a Token.
     */
    get: operations["get-tokens-token-webhooks"];
    /**
     * Create Webhooks for Token 
     * @description Create a new webhook for a Token.
     */
    post: operations["post-tokens-token-webhooks"];
    parameters: {
      path: {
        token: string;
      };
    };
  };
  "/tokens/{token}/webhooks/{idWebhook}": {
    /**
     * Get a Webhook belonging to a Token 
     * @description Retrieve a webhook created with a Token.
     */
    get: operations["get-tokens-token-webhooks-idwebhook"];
    /**
     * Update a Webhook created by Token 
     * @description Update a Webhook created by Token
     */
    put: operations["tokenstokenwebhooks-1"];
    /**
     * Delete a Webhook created by Token 
     * @description Delete a webhook created with given token.
     */
    delete: operations["delete-tokens-token-webhooks-idwebhook"];
    parameters: {
      path: {
        token: string;
        /** @description ID of the [Webhooks](ref:webhooks) to retrieve. */
        idWebhook: components["schemas"]["TrelloID"];
      };
    };
  };
  "/tokens/{token}/": {
    /**
     * Delete a Token 
     * @description Delete a token.
     */
    delete: operations["delete-token"];
  };
  "/webhooks/": {
    /**
     * Create a Webhook 
     * @description Create a new webhook.
     */
    post: operations["post-webhooks"];
  };
  "/webhooks/{id}": {
    /**
     * Get a Webhook 
     * @description Get a webhook by ID. You must use the token query parameter and pass in the token the webhook was created under, or else you will encounter a 'webhook does not belong to token' error.
     */
    get: operations["get-webhooks-id"];
    /**
     * Update a Webhook 
     * @description Update a webhook by ID.
     */
    put: operations["put-webhooks-id"];
    /**
     * Delete a Webhook 
     * @description Delete a webhook by ID.
     */
    delete: operations["delete-webhooks-id"];
    parameters: {
      path: {
        /** @description ID of the webhook to retrieve. */
        id: components["schemas"]["TrelloID"];
      };
    };
  };
  "/webhooks/{id}/{field}": {
    /**
     * Get a field on a Webhook 
     * @description Get a field on a Webhook
     */
    get: operations["webhooksidfield"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    posStringOrNumber: ("top" | "bottom") | number;
    /** @example 0471642aefef5fa1fa76530ce1ba4c85 */
    APIKey: string;
    /** @example 9eb76d9a9d02b8dd40c2f3e5df18556c831d4d1fadbe2c45f8310e6c93b5c548 */
    APIToken: string;
    /** @enum {string} */
    ActionFields: "id" | "idMemberCreator" | "data" | "type" | "date" | "limits" | "display" | "memberCreator";
    Action: {
      id?: components["schemas"]["TrelloID"];
      idMemberCreator?: components["schemas"]["TrelloID"];
      data?: {
        /** @example Can never go wrong with bowie */
        text?: string;
        card?: {
          id?: components["schemas"]["TrelloID"];
          /** @example Bowie */
          name?: string;
          /** @example 7 */
          idShort?: number;
          /** @example 3CsPkqOF */
          shortLink?: string;
        };
        board?: {
          id?: components["schemas"]["TrelloID"];
          /** @example Mullets */
          name?: string;
          /** @example 3CsPkqOF */
          shortLink?: string;
        };
        list?: {
          id?: components["schemas"]["TrelloID"];
          /** @example Amazing */
          name?: string;
        };
      };
      /** @example commentCard */
      type?: string;
      /**
       * Format: date-time 
       * @example 2020-03-09T19:41:51.396Z
       */
      date?: string;
      limits?: {
        reactions?: {
          perAction?: {
            /** @example ok */
            status?: string;
            /** @example 1000 */
            disableAt?: number;
            /** @example 900 */
            warnAt?: number;
          };
          uniquePerAction?: {
            /** @example ok */
            status?: string;
            /** @example 1000 */
            disableAt?: number;
            /** @example 900 */
            warnAt?: number;
          };
        };
      };
      display?: {
        /** @example action_comment_on_card */
        translationKey?: string;
        entities?: {
          contextOn?: {
            /** @example translatable */
            type?: string;
            /** @example action_on */
            translationKey?: string;
            hideIfContext?: boolean;
            idContext?: components["schemas"]["TrelloID"];
          };
          card?: {
            /** @example card */
            type?: string;
            hideIfContext?: boolean;
            id?: components["schemas"]["TrelloID"];
            /** @example 3CsPkqOF */
            shortLink?: string;
            /** @example Bowie */
            text?: string;
          };
          comment?: {
            /** @example comment */
            type?: string;
            /** @example Can never go wrong with bowie */
            text?: string;
          };
          memberCreator?: {
            /** @example member */
            type?: string;
            id?: components["schemas"]["TrelloID"];
            /** @example bobloblaw */
            username?: string;
            /** @example Bob Loblaw (World) */
            text?: string;
          };
        };
      };
      memberCreator?: {
        /** @example 5b02e7f4e1facdc393169f9d */
        id?: components["schemas"]["TrelloID"];
        /** @example false */
        activityBlocked?: boolean;
        /** @example db2adf80c2e6c26b76e1f10400eb4c45 */
        avatarHash?: string;
        /**
         * Format: url 
         * @example https://trello-members.s3.amazonaws.com/5b02e7f4e1facdc393169f9d/db2adf80c2e6c26b76e1f10400eb4c45
         */
        avatarUrl?: string;
        /** @example Bob Loblaw (Trello) */
        fullName?: string;
        /** @example null */
        idMemberReferrer?: components["schemas"]["TrelloID"];
        /** @example BL */
        initials?: string;
        /** @example bobloblaw */
        username?: string;
      };
    };
    /** @enum {string} */
    AttachmentFields: "id" | "bytes" | "date" | "edgeColor" | "idMember" | "isUpload" | "mimeType" | "name" | "previews" | "url" | "pos";
    Attachment: {
      /** @example 5bc79d4206526d2279c1e6ea */
      id?: components["schemas"]["TrelloID"];
      /** @example null */
      bytes?: string | null;
      /**
       * Format: date 
       * @example 2018-10-17T19:10:14.808Z
       */
      date?: string;
      /** @example null */
      edgeColor?: components["schemas"]["Color"];
      /** @example 5bc79d4206526d2279c1e6eb */
      idMember?: components["schemas"]["TrelloID"];
      /** @example false */
      isUpload?: boolean;
      /** @example */
      mimeType?: string;
      /** @example Deprecation Extension Notice */
      name?: string;
      /** @example [] */
      previews?: (string)[];
      /**
       * Format: url 
       * @example https://admin.typeform.com/form/RzExEM/share#/link
       */
      url?: string;
      /**
       * Format: float 
       * @example 1638
       */
      pos?: number;
    };
    /**
     * @example notification_comment_card 
     * @enum {string}
     */
    BlockedKey: "notification_comment_card" | "notification_added_a_due_date" | "notification_changed_due_date" | "notification_card_due_soon" | "notification_removed_from_card" | "notification_added_attachment_to_card" | "notification_created_card" | "notification_moved_card" | "notification_archived_card" | "notification_unarchived_card";
    /** @enum {string} */
    BoardFields: "id" | "name" | "desc" | "descData" | "closed" | "idMemberCreator" | "idOrganization" | "pinned" | "url" | "shortUrl" | "prefs" | "labelNames" | "starred" | "limits" | "memberships" | "enterpriseOwned";
    Board: {
      id: components["schemas"]["TrelloID"];
      /**
       * @description The name of the board. 
       * @example Trello Platform Changes
       */
      name?: string;
      /** @example Track changes to Trello's Platform on this board. */
      desc?: string;
      descData?: string;
      /** @example false */
      closed?: boolean;
      idMemberCreator?: components["schemas"]["TrelloID"];
      idOrganization?: components["schemas"]["TrelloID"];
      /** @example false */
      pinned?: boolean;
      /**
       * Format: url 
       * @example https://trello.com/b/dQHqCohZ/trello-platform-changelog
       */
      url?: string;
      /**
       * Format: url 
       * @example https://trello.com/b/dQHqCohZ
       */
      shortUrl?: string;
      prefs?: components["schemas"]["Prefs"];
      labelNames?: {
        /** @example Addition */
        green?: string;
        /** @example Update */
        yellow?: string;
        /** @example Deprecation */
        orange?: string;
        /** @example Deletion */
        red?: string;
        /** @example Power-Ups */
        purple?: string;
        /** @example News */
        blue?: string;
        /** @example Announcement */
        sky?: string;
        /** @example Delight */
        lime?: string;
        /** @example REST API */
        pink?: string;
        /** @example Capabilties */
        black?: string;
      };
      limits?: components["schemas"]["Limits"];
      starred?: boolean;
      memberships?: string;
      shortLink?: string;
      subscribed?: boolean;
      powerUps?: string;
      /** Format: date */
      dateLastActivity?: string;
      /** Format: date */
      dateLastView?: string;
      idTags?: string;
      /** Format: date */
      datePluginDisable?: string | null;
      creationMethod?: string | null;
      ixUpdate?: number;
      templateGallery?: string | null;
      enterpriseOwned?: boolean;
    };
    BoardBackground: {
      id?: components["schemas"]["TrelloID"];
    };
    BoardStars: {
      /** @example 585063850027165010be15a8 */
      id?: components["schemas"]["TrelloID"];
      /** @example 57f7df684f1ca8c2877162e0 */
      idBoard?: components["schemas"]["TrelloID"];
      /** @example 32768 */
      pos?: number;
    };
    /**
     * @example email 
     * @enum {string}
     */
    Channel: "email";
    CheckItem: {
      /** @example 5dc9b507756e182c76007621 */
      idChecklist?: components["schemas"]["TrelloID"];
      /**
       * @example incomplete 
       * @enum {string}
       */
      state?: "complete" | "incomplete";
      /** @example 5dc9b509f02f4314edc4303a */
      id?: components["schemas"]["TrelloID"];
      name?: string;
      /** @example null */
      nameData?: string | null;
      /** @example 1673 */
      pos?: string;
    };
    Checklist: {
      id?: components["schemas"]["TrelloID"];
    };
    Card: {
      id?: components["schemas"]["TrelloID"];
      address?: string | null;
      badges?: {
        attachmentsByType?: {
          trello?: {
            board?: number;
            card?: number;
          };
        };
        location?: boolean;
        votes?: number;
        /** @example false */
        viewingMemberVoted?: boolean;
        /** @example false */
        subscribed?: boolean;
        fogbugz?: string;
        /** @example 0 */
        checkItems?: number;
        /** @example 0 */
        checkItemsChecked?: number;
        /** @example 0 */
        comments?: number;
        /** @example 0 */
        attachments?: number;
        description?: boolean;
        /** Format: date */
        due?: string | null;
        /** Format: date */
        start?: string | null;
        dueComplete?: boolean;
      };
      checkItemStates?: (string)[];
      closed?: boolean;
      coordinates?: string | null;
      creationMethod?: string | null;
      /**
       * Format: date-time 
       * @example 2019-09-16T16:19:17.156Z
       */
      dateLastActivity?: string;
      /**
       * @example ðHey there,
       * 
       * Trello's Platform team uses this board to keep developers up-to-date.
       */
      desc?: string;
      descData?: {
        emoji?: Record<string, never>;
      };
      /** Format: date */
      due?: string | null;
      dueReminder?: string | null;
      /**
       * Format: email 
       * @example bentleycook+2kea95u7kchsvqnxkwe+2q0byi6qv4pt9uc7q5m+25qyyohtzg@boards.trello.com
       */
      email?: string;
      /** @example 5abbe4b7ddc1b351ef961414 */
      idBoard?: components["schemas"]["TrelloID"];
      idChecklists?: (components["schemas"]["Checklist"] | components["schemas"]["TrelloID"])[];
      idLabels?: (components["schemas"]["Label"] | components["schemas"]["TrelloID"])[];
      /** @example 5abbe4b7ddc1b351ef961415 */
      idList?: components["schemas"]["TrelloID"];
      idMembers?: (components["schemas"]["TrelloID"])[];
      idMembersVoted?: (components["schemas"]["TrelloID"])[];
      idShort?: number;
      /** @example 5abbe4b7ddc1b351ef961415 */
      idAttachmentCover?: components["schemas"]["TrelloID"];
      labels?: (components["schemas"]["TrelloID"])[];
      limits?: components["schemas"]["Limits"];
      locationName?: string | null;
      /** @example false */
      manualCoverAttachment?: boolean;
      /** @example ð What? Why? How? */
      name?: string;
      /**
       * Format: float 
       * @example 65535
       */
      pos?: number;
      /** @example H0TZyzbK */
      shortLink?: string;
      /**
       * Format: url 
       * @example https://trello.com/c/H0TZyzbK
       */
      shortUrl?: string;
      /** @example false */
      subscribed?: boolean;
      /**
       * Format: url 
       * @example https://trello.com/c/H0TZyzbK/4-%F0%9F%91%8B-what-why-how
       */
      url?: string;
      cover?: {
        idAttachment?: components["schemas"]["TrelloID"];
        color?: components["schemas"]["Color"];
        idUploadedBackground?: boolean | null;
        /** @enum {string} */
        size?: "normal";
        /** @enum {string} */
        brightness?: "light" | "dark";
        /** @example false */
        isTemplate?: boolean;
      };
    };
    /**
     * @description The fields on a Card. 
     * @enum {string}
     */
    CardFields: "id" | "address" | "badges" | "checkItemStates" | "closed" | "coordinates" | "creationMethod" | "dueComplete" | "dateLastActivity" | "desc" | "descData" | "due" | "dueReminder" | "email" | "idBoard" | "idChecklists" | "idLabels" | "idList" | "idMembers" | "idMembersVoted" | "idShort" | "idAttachmentCover" | "labels" | "limits" | "locationName" | "manualCoverAttachment" | "name" | "pos" | "shortLink" | "shortUrl" | "subscribed" | "url" | "cover" | "isTemplate";
    ClaimableOrganizations: {
      organizations?: ({
          /** @example organization_name */
          name?: string;
          /** @example Organization Name */
          displayName?: string;
          /** @example 5 */
          activeMembershipCount?: number;
          idActiveAdmins?: (components["schemas"]["TrelloID"])[];
          products?: (number)[];
          /** @example 617abd5995eae45169a11059 */
          id?: components["schemas"]["TrelloID"];
          /** @example null */
          logoUrl?: string | null;
          /**
           * Format: date 
           * @description The date of the most recent activity on any of the boards in the workspace. If the workspace has no boards, or the boards have no activity, this value will be null. 
           * @example 2019-08-22T18:15:53.546Z
           */
          dateLastActive?: string | null;
        })[];
      /** @example 2 */
      claimableCount?: number;
    };
    CustomEmoji: {
      /** @example 5900ac11ed55d6d2c355c5d6 */
      id?: components["schemas"]["TrelloID"];
      /**
       * Format: url 
       * @example https://trello-emoji.s3.amazonaws.com/5589c3ea49b40cedc28cf70e/b40d9925f4e75495104b5e560881d8e4/chorizo.png
       */
      url?: string;
      /** @example chorizo */
      name?: string;
    };
    CustomField: {
      /** @example 5ab10be237846c43015f108e */
      id?: components["schemas"]["TrelloID"];
      /** @example 586e8f681d4fe9b06a928307 */
      idModel?: string;
      /**
       * @example board 
       * @enum {string}
       */
      modelType?: "card" | "board" | "member";
      /** @example f6177ba6839d6fff0f73922c1cea105e793fda8a1433d466104dacc0b7c56955 */
      fieldGroup?: string;
      display?: {
        /** @example true */
        cardFront?: boolean;
        /** @example Priority ð */
        name?: string;
        /** @example 98304, */
        pos?: string;
        options?: ({
            /** @example 5ab10be237846c43015f1091 */
            id?: components["schemas"]["TrelloID"];
            /** @example 5ab10be237846c43015f108e */
            idCustomField?: components["schemas"]["TrelloID"];
            value?: {
              /** @example High */
              text?: string;
            };
            /** @example red */
            color?: string;
            /** @example 16384 */
            pos?: number;
          })[];
      };
      /** @example list */
      type?: string;
    };
    CustomFieldItems: {
      id?: components["schemas"]["TrelloID"];
      value?: {
        /** @example true */
        checked?: string;
      };
      /** @example 5b080fd8017bd1653b5480fa */
      idCustomField?: components["schemas"]["TrelloID"];
      /** @example 5b080ff194611b41aaaa9570 */
      idModel?: components["schemas"]["TrelloID"];
      /**
       * @example card 
       * @enum {string}
       */
      modelType?: "card" | "board" | "member";
    };
    CustomSticker: {
      id?: components["schemas"]["TrelloID"];
      /** Format: url */
      url?: string;
      scaled?: ({
          id?: components["schemas"]["TrelloID"];
        })[];
    };
    Emoji: {
      trello?: ({
          /** @example 1F600 */
          unified?: string;
          /** @example GRINNING FACE */
          name?: string;
          /** @example ð */
          native?: string;
          /** @example grinning */
          shortName?: string;
          shortNames?: (string)[];
          /** @example :) */
          text?: string;
          /** @example null */
          texts?: string | null;
          /** @example Smileys & People */
          category?: string;
          /** @example 30 */
          sheetX?: number;
          /** @example 24 */
          sheetY?: number;
          /** @example grinning face */
          tts?: string;
          keywords?: (string)[];
        })[];
    };
    Enterprise: {
      /** @example 59c15d19566e197b23665901 */
      id?: components["schemas"]["TrelloID"];
      /** @example bentley_test */
      name?: string;
      /** @example Bentley's Test Enterprise! */
      displayName?: string;
      /** @example null */
      logoHash?: string | null;
      /** @example null */
      logoUrl?: string | null;
      prefs?: {
        /** @example false */
        ssoOnly?: boolean;
        signup?: {
          banner?: string;
          /** @example <p>Hello</p> */
          bannerHtml?: string;
        };
        /**
         * Format: date 
         * @example null
         */
        mandatoryTransferDate?: string | null;
        brandingColor?: string;
        /** @example false */
        autoJoinOrganizations?: boolean;
        notifications?: Record<string, never>;
        /** @example null */
        maxMembers?: number | null;
      };
      organizationPrefs?: {
        boardVisibilityRestrict?: Record<string, never>;
        boardDeleteRestrict?: Record<string, never>;
        attachmentRestrictions?: ("computer" | "trello" | "google-drive" | "box" | "onedrive" | "link")[];
      };
      ssoActivationFailed?: boolean;
      idAdmins?: (components["schemas"]["TrelloID"])[];
      enterpriseDomains?: (string)[];
      /** @example true */
      isRealEnterprise?: boolean;
      pluginWhitelistingEnabled?: (components["schemas"]["TrelloID"])[];
      idOrganizations?: (components["schemas"]["TrelloID"])[];
      products?: (number)[];
      licenses?: {
        /**
         * Format: integer 
         * @example null
         */
        maxMembers?: number | null;
        /**
         * Format: integer 
         * @example 5
         */
        totalMembers?: number;
        relatedEnterprises?: ({
            /** @example enterprise_name */
            name?: string;
            /** @example My Test Enterprise! */
            displayName?: string;
            /**
             * Format: integer 
             * @example 5
             */
            count?: number;
          })[];
      };
      domains?: (string)[];
      /**
       * Format: date 
       * @example 2019-08-22T18:15:53.546Z
       */
      dateOrganizationPrefsLastUpdated?: string;
      idp?: {
        /** @example false */
        requestSigned?: boolean;
        /** @example null */
        certificate?: string | null;
        /**
         * Format: url 
         * @example null
         */
        loginUrl?: string | null;
      };
    };
    EnterpriseAdmin: {
      /** @example 5dced8665015383ed5ca248c */
      id?: components["schemas"]["TrelloID"];
      /** @example Bob Loblaw */
      fullName?: string;
      /** @example bobloblaw */
      username?: string;
    };
    EnterpriseAuditLog: {
      /** @example 5dced8665015383ed5ca248c */
      idAction?: components["schemas"]["TrelloID"];
      /** @example addOrganizationToEnterprise */
      type?: string;
      /**
       * Format: date 
       * @example 2018-04-26T17:03:25.155Z
       */
      date?: string;
      memberCreator?: {
        /** @example 5bc79d4206526d2279c1e6ea */
        id?: components["schemas"]["TrelloID"];
        /** @example bobloblaw */
        username?: string;
        /** @example Bob Loblaw (Trello) */
        fullName?: string;
      };
      organization?: {
        enterpriseJoinRequest?: {
          /** @example 617ac9070293e6612650e0ca */
          idEnterprise?: components["schemas"]["TrelloID"];
          /** @example 5bc79d4206526d2279c1e6ea */
          idMember?: components["schemas"]["TrelloID"];
          /**
           * Format: date 
           * @example 2018-04-26T17:03:25.155Z
           */
          date?: string;
        } | null;
        /** @example 617ac9070293e6612650e0ca */
        id?: components["schemas"]["TrelloID"];
        /** @example organization name */
        name?: string;
      };
      member?: {
        /** @example 5bc79d4206526d2279c1e6ea */
        id?: components["schemas"]["TrelloID"];
        /** @example bentleycook */
        username?: string;
        /** @example Bentley Cook */
        fullName?: string;
      };
    };
    Export: {
      /** @example 5dced8665015383ed5ca248c */
      id?: components["schemas"]["TrelloID"];
      status?: {
        /** @example 0 */
        attempts?: number;
        /** @example false */
        finished?: boolean;
        /** @example Export_queued */
        stage?: string;
      };
      /**
       * Format: date-time 
       * @example 2019-11-15T16:55:02.000Z
       */
      startedAt?: string;
      /** @example null */
      size?: string | null;
      /** @example null */
      exportUrl?: string | null;
    };
    /** @example 5abbe4b7ddc1b351ef961414 */
    TrelloID: string;
    /** @enum {string} */
    ViewFilter: "all" | "closed" | "none" | "open";
    /** @enum {string|null} */
    Color: "yellow" | "purple" | "blue" | "red" | "green" | "orange" | "black" | "sky" | "pink" | "lime" | null;
    /** @enum {string} */
    CardAging: "pirate" | "regular";
    ImageDescriptor: {
      /**
       * @description The width of the image. 
       * @example 100
       */
      width?: number;
      /**
       * @description The height of the image. 
       * @example 64
       */
      height?: number;
      /**
       * Format: url 
       * @description The URL of the image. 
       * @example https://trello-backgrounds.s3.amazonaws.com/SharedBackground/100x64/abc/photo-123.jpg
       */
      url?: string;
    };
    Label: {
      /** @description The ID of the label. */
      id?: components["schemas"]["TrelloID"];
      /**
       * @description The ID of the board the label is on. 
       * @example 5abbe4b7ddc1b351ef961414
       */
      idBoard?: components["schemas"]["TrelloID"];
      /**
       * @description The name displayed for the label. 
       * @example Overdue
       */
      name?: string | null;
      /** @description The color of the label. Null means no color and the label will not be shown on the front of Cards. */
      color?: components["schemas"]["Color"];
    };
    /** @enum {string} */
    ListFields: "id";
    TrelloList: {
      id?: components["schemas"]["TrelloID"];
      /**
       * @description The name of the list 
       * @example Things to buy today
       */
      name?: string;
      closed?: boolean;
      pos?: number;
      softLimit?: string;
      idBoard?: string;
      subscribed?: boolean;
      limits?: components["schemas"]["Limits"];
    };
    LimitsObject: {
      /** @enum {string} */
      status?: "ok" | "warning";
      /** @example 36000 */
      disableAt?: number;
      /** @example 32400 */
      warnAt?: number;
    };
    Limits: {
      attachments?: {
        perBoard?: components["schemas"]["LimitsObject"];
      };
    };
    /** @enum {string} */
    MemberFields: "id";
    Member: {
      id?: components["schemas"]["TrelloID"];
      /** @example false */
      activityBlocked?: boolean;
      /** @example fc8faaaee46666a4eb8b626c08933e16 */
      avatarHash?: string;
      /**
       * Format: url 
       * @example https://trello-avatars.s3.amazonaws.com/fc8faaaee46666a4eb8b626c08933e16
       */
      avatarUrl?: string;
      /** @example ð I'm a developer advocate at Trello! */
      bio?: string;
      bioData?: {
        emoji?: Record<string, never>;
      };
      /** @example true */
      confirmed?: boolean;
      /** @example Bentley Cook */
      fullName?: string;
      idEnterprise?: components["schemas"]["TrelloID"];
      idEnterprisesDeactivated?: (string)[];
      /** @example null */
      idMemberReferrer?: components["schemas"]["TrelloID"];
      idPremOrgsAdmin?: (components["schemas"]["TrelloID"])[];
      /** @example BC */
      initials?: string;
      /**
       * @example normal 
       * @enum {string}
       */
      memberType?: "normal" | "ghost";
      /**
       * @description Profile data with restricted visibility. These fields are visible only to members of the
       * same organization. The values here (full name, for example) may differ from the values
       * at the top level of the response.
       */
      nonPublic?: {
        /** @example Bentley Cook */
        fullName?: string;
        /** @example BC */
        initials?: string;
        /**
         * Format: url 
         * @description A URL that references the non-public avatar for the member 
         * @example https://trello-members.s3.amazonaws.com/5b02e7f4e1facdc393169f9d/db2adf80c2e6c26b76e1f10400eb4c45
         */
        avatarUrl?: string;
        /** @example db2adf80c2e6c26b76e1f10400eb4c45 */
        avatarHash?: string;
      };
      /**
       * @description Whether the response contains non-public profile data for the member 
       * @example false
       */
      nonPublicAvailable?: boolean;
      products?: (number)[];
      /**
       * Format: url 
       * @example https://trello.com/bentleycook
       */
      url?: string;
      /** @example bentleycook */
      username?: string;
      /**
       * @example disconnected 
       * @enum {string}
       */
      status?: "disconnected";
      /**
       * Format: email 
       * @example null
       */
      aaEmail?: string | null;
      /** @example null */
      aaEnrolledDate?: string | null;
      /** @example null */
      aaId?: string | null;
      /**
       * @example gravatar 
       * @enum {string}
       */
      avatarSource?: "gravatar" | "upload";
      /** @example bcook@atlassian.com */
      email?: string;
      /** @example 0a1e804f6e35a65ae5e1f7ef4c92471c */
      gravatarHash?: string;
      idBoards?: (components["schemas"]["TrelloID"])[];
      idOrganizations?: (components["schemas"]["TrelloID"])[];
      idEnterprisesAdmin?: (components["schemas"]["TrelloID"])[];
      limits?: components["schemas"]["LimitsObject"];
      loginTypes?: ("password" | "saml")[];
      marketingOptIn?: {
        /** @example false */
        optedIn?: boolean;
        /**
         * Format: date 
         * @example 2018-04-26T17:03:25.155Z
         */
        date?: string;
      };
      messagesDismissed?: {
        /** @example ad-security-features */
        name?: string;
        /** @example 4 */
        count?: string;
        /**
         * Format: date 
         * @example 2019-03-11T20:19:46.809Z
         */
        lastDismissed?: string;
        /** @example 5995d44573d197eada632a32 */
        _id?: components["schemas"]["TrelloID"];
      };
      oneTimeMessagesDismissed?: (string)[];
      prefs?: components["schemas"]["MemberPrefs"];
      trophies?: (string)[];
      /** @example dac3ad49ff117829dd63a79bb2ea3426 */
      uploadedAvatarHash?: string;
      /**
       * Format: url 
       * @example https://trello-avatars.s3.amazonaws.com/dac3ad49ff117829dd63a79bb2ea3426
       */
      uploadedAvatarUrl?: string;
      premiumFeatures?: (string)[];
      /** @example false */
      isAaMastered?: boolean;
      /** @example 48427 */
      ixUpdate?: number;
      idBoardsPinned?: (components["schemas"]["TrelloID"])[] | null;
    };
    MemberPrefs: {
      timezoneInfo?: {
        /** @example 360 */
        offsetCurrent?: number;
        /** @example CST */
        timezoneCurrent?: string;
        /** @example 300 */
        offsetNext?: number;
        /**
         * Format: date 
         * @example 2020-03-08T08:00:00.000Z
         */
        dateNext?: string;
        /** @example CDT */
        timezoneNext?: string;
      };
      privacy?: {
        /**
         * @example public 
         * @enum {string}
         */
        fullName?: "public" | "private" | "collaborator";
        /**
         * @example public 
         * @enum {string}
         */
        avatar?: "public" | "private" | "collaborator";
      };
      /** @example true */
      sendSummaries?: boolean;
      /** @example 60 */
      minutesBetweenSummaries?: number;
      /** @example 1440 */
      minutesBeforeDeadlineToNotify?: number;
      /** @example true */
      colorBlind?: boolean;
      /** @example en-AU */
      locale?: string;
      /** @example America/Chicago */
      timezone?: string;
      twoFactor?: {
        /** @example true */
        enabled?: boolean;
        /** @example false */
        needsNewBackups?: boolean;
      };
    };
    Memberships: {
      id?: components["schemas"]["TrelloID"];
    };
    /** @enum {string} */
    NotificationFields: "id" | "unread" | "type" | "date" | "dateRead" | "data" | "card" | "board" | "idMemberCreator" | "idAction" | "reactions";
    Notification: {
      /** @example 5dc591ac425f2a223aba0a8e */
      id?: string;
      /** @example true */
      unread?: boolean;
      /**
       * @example cardDueSoon 
       * @enum {string}
       */
      type?: "cardDueSoon";
      /** @example 2019-11-08T16:02:52.763Z */
      date?: string;
      /** @example null */
      dateRead?: string;
      /** @example null */
      data?: string;
      card?: components["schemas"]["Card"];
      board?: components["schemas"]["Board"];
      /** @example null */
      idMemberCreator?: components["schemas"]["TrelloID"];
      /** @example null */
      idAction?: components["schemas"]["TrelloID"];
      /** @example [] */
      reactions?: (unknown)[];
    };
    NotificationChannelSettings: {
      /** @example 5dc591ac425f2a223aba0a8e */
      id?: string;
      /** @example 5589c3ea49b40cedc28cf70e */
      idMember?: components["schemas"]["TrelloID"];
      blockedKeys?: (components["schemas"]["BlockedKey"])[];
      channel?: components["schemas"]["Channel"];
    };
    /** @enum {string} */
    OrganizationFields: "id" | "name";
    Organization: {
      id?: components["schemas"]["TrelloID"];
    };
    PendingOrganizations: {
      /** @example 617ac9070293e6612650e0ca */
      id?: components["schemas"]["TrelloID"];
      /** @example 5589c3ea49b40cedc28cf70e */
      idMember?: components["schemas"]["TrelloID"];
      memberRequestor?: {
        /** @example 59cd149051aa57a706962996 */
        id?: components["schemas"]["TrelloID"];
        /** @example Bob Loblaw (Trello) */
        fullName?: string;
      };
      /**
       * Format: date 
       * @example 2018-10-17T19:10:14.808Z
       */
      date?: string;
      /** @example Organization Name */
      displayName?: string;
      /** @example 2 */
      membershipCount?: number;
      /** @example null */
      logoUrl?: string | null;
      transferability?: {
        /** @example true */
        transferrable?: boolean;
        newBillableMembers?: ({
            /** @example 5ab10be237846c43015f1091 */
            id?: components["schemas"]["TrelloID"];
            /** @example Bob Loblaw */
            fullName?: string;
            /** @example bobloblaw */
            username?: string;
            /** @example BL */
            initials?: string;
            /** @example fc8faaaee46666a4eb8b626c08933e16 */
            avatarHash?: string;
          })[];
        restrictedMembers?: ({
            /** @example 5ab10be237846c43015f1091 */
            id?: components["schemas"]["TrelloID"];
            /** @example Bob Loblaw */
            fullName?: string;
            /** @example bobloblaw */
            username?: string;
            /** @example BL */
            initials?: string;
            /** @example fc8faaaee46666a4eb8b626c08933e16 */
            avatarHash?: string;
          })[];
      };
    };
    Plugin: {
      id?: components["schemas"]["TrelloID"];
    };
    PluginData: {
      /** @example 5c487f39294cab6ac1d6b305 */
      id?: components["schemas"]["TrelloID"];
      /** @example 55a5d915446f517774210003 */
      idPlugin?: components["schemas"]["TrelloID"];
      /**
       * @example organization 
       * @enum {string}
       */
      scope?: "member" | "board" | "organization" | "card";
      /** @example 586e8d7b1af892b26d5b76b1 */
      idModel?: components["schemas"]["TrelloID"];
      /** @example {"token":"S=s458:U=bda7cda:E=16fd2e21f55:C=1687b30f2c0:P=185:A=it-team-0604:V=2:H=3b0f3bac9c2a2af766202ebb9530a4a5"} */
      value?: string;
      /**
       * @example private 
       * @enum {string}
       */
      access?: "private" | "shared";
    };
    PluginListing: {
      /** @example 5a7cd2f8f99c517f58da1579 */
      id?: components["schemas"]["TrelloID"];
      /** @example Attachment Section Example */
      name?: string;
      /** @example en-US */
      locale?: string;
      /** @example The [Glitch](https://glitch.com) Power-Up allows you to... */
      description?: string;
      /** @example */
      overview?: string;
    };
    Prefs: {
      /** @enum {string} */
      permissionLevel?: "org" | "board";
      hideVotes?: boolean;
      /** @enum {string} */
      voting?: "disabled" | "enabled";
      comments?: string;
      /** @enum {unknown} */
      invitations?: "admins" | "members";
      selfJoin?: boolean;
      cardCovers?: boolean;
      isTemplate?: boolean;
      cardAging?: components["schemas"]["CardAging"];
      calendarFeedEnabled?: boolean;
      background?: components["schemas"]["TrelloID"];
      /** Format: uri */
      backgroundImage?: string;
      backgroundImageScaled?: (components["schemas"]["ImageDescriptor"])[];
      backgroundTile?: boolean;
      /** @example dark */
      backgroundBrightness?: string;
      /** @example #1e2e00 */
      backgroundBottomColor?: string;
      /** @example #ffffff */
      backgroundTopColor?: string;
      canBePublic?: boolean;
      canBeEnterprise?: boolean;
      canBeOrg?: boolean;
      canBePrivate?: boolean;
      canInvite?: boolean;
    };
    SavedSearch: {
      /** @example 5589b47349b40cedc28ceae2 */
      id?: components["schemas"]["TrelloID"];
      /** @example My Cards */
      name?: string;
      /** @example @me */
      query?: string;
      /** @example 1638 */
      pos?: components["schemas"]["posStringOrNumber"];
    };
    Tag: {
      /** @example 58dd6dcaf8b86744d3cb4cde */
      id?: components["schemas"]["TrelloID"];
      /** @example My Collection */
      name?: string;
    };
    TokenPermission: {
      idModel?: components["schemas"]["TrelloID"] | "*";
      /** @enum {string} */
      modelType?: "board" | "member" | "organization" | "enterprise";
      read?: boolean;
      write?: boolean;
    };
    /** @enum {string} */
    TokenFields: "identifier" | "idMember" | "dateCreated" | "dateExpires" | "permissions";
    Token: {
      /** @example 5da728c55235b443c5b97181 */
      id?: components["schemas"]["TrelloID"];
      /** @example App Name */
      identifier?: string;
      /** @example 5589c3ea49b40cedc28cf70e */
      idMember?: components["schemas"]["TrelloID"];
      /**
       * Format: date-time 
       * @example 2019-10-16T14:27:17.304Z
       */
      dateCreated?: string;
      /**
       * Format: date-time 
       * @example null
       */
      dateExpires?: string | null;
      permissions?: (components["schemas"]["TokenPermission"])[];
    };
    TransferrableOrganization: {
      /** @example true */
      transferrable?: boolean;
      newBillableMembers?: ({
          /** @example 5ab10be237846c43015f1091 */
          id?: components["schemas"]["TrelloID"];
          /** @example Bob Loblaw */
          fullName?: string;
          /** @example bobloblaw */
          username?: string;
          /** @example BL */
          initials?: string;
          /** @example fc8faaaee46666a4eb8b626c08933e16 */
          avatarHash?: string;
        })[];
      restrictedMembers?: ({
          /** @example 5ab10be237846c43015f1091 */
          id?: components["schemas"]["TrelloID"];
          /** @example Bob Loblaw */
          fullName?: string;
          /** @example bobloblaw */
          username?: string;
          /** @example BL */
          initials?: string;
          /** @example fc8faaaee46666a4eb8b626c08933e16 */
          avatarHash?: string;
        })[];
    };
    Webhook: {
      /** @example 58dd6dcaf8b86744d3cb4cde */
      id?: components["schemas"]["TrelloID"];
      /** @example Board Webhook */
      description?: string;
      /** @example 59cd149051aa57a706962996 */
      idModel?: components["schemas"]["TrelloID"];
      /**
       * Format: url 
       * @example https://mywebhookurl.com/?type=board
       */
      callbackURL?: string;
      /** @example true */
      active?: boolean;
      /** @example 0 */
      consecutiveFailures?: number;
      /**
       * Format: date 
       * @example null
       */
      firstConsecutiveFailDate?: string | null;
    };
    Error: {
      code: string;
      message: string;
    };
    CFValue: {
      number?: string;
    };
    customFieldItemValue: {
      value?: Record<string, never>;
    };
  };
  responses: {
    /** @description The specified resource was not found */
    NotFound: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Unauthorized */
    Unauthorized: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * Get an Action 
   * @description Get an Action
   */
  "get-actions-id": {
    parameters: {
      query: {
        display?: boolean;
        entities?: boolean;
        /** @description `all` or a comma-separated list of action [fields](/cloud/trello/guides/rest-api/object-definitions/#action-object) */
        fields?: "all" | (components["schemas"]["ActionFields"])[];
        member?: boolean;
        /** @description `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        member_fields?: "all" | (components["schemas"]["MemberFields"])[];
        /** @description Whether to include the member object for the creator of the action */
        memberCreator?: boolean;
        /** @description `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        memberCreator_fields?: "all" | (components["schemas"]["MemberFields"])[];
      };
      path: {
        /** @description The ID of the Action */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Update an Action 
   * @description Update a specific Action. Only comment actions can be updated. Used to edit the content of a comment.
   */
  "put-actions-id": {
    parameters: {
      query: {
        /** @description The new text for the comment */
        text: string;
      };
      path: {
        /** @description The ID of the Action */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Delete an Action 
   * @description Delete a specific action. Only comment actions can be deleted.
   */
  "delete-actions-id": {
    parameters: {
      path: {
        /** @description The ID of the Action */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get a specific field on an Action 
   * @description Get a specific property of an action
   */
  "get-actions-id-field": {
    parameters: {
      path: {
        /** @description The ID of the Action */
        id: components["schemas"]["TrelloID"];
        /** @description An action field */
        field: components["schemas"]["ActionFields"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Action"];
        };
      };
    };
  };
  /**
   * Get the Board for an Action 
   * @description Get the Board for an Action
   */
  "get-actions-id-board": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of board fields */
        fields?: "all" | (components["schemas"]["BoardFields"])[];
      };
      path: {
        /** @description The ID of the action */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Board"];
        };
      };
    };
  };
  /**
   * Get the Card for an Action 
   * @description Get the card for an action
   */
  "get-actions-id-card": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of card fields */
        fields?: "all" | (components["schemas"]["CardFields"])[];
      };
      path: {
        /** @description The ID of the action */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Card"];
        };
      };
    };
  };
  /**
   * Get the List for an Action 
   * @description Get the List for an Action
   */
  "get-actions-id-list": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of list fields */
        fields?: "all" | (components["schemas"]["ListFields"])[];
      };
      path: {
        /** @description The ID of the action */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["TrelloList"];
        };
      };
    };
  };
  /**
   * Get the Member of an Action 
   * @description Gets the member of an action (not the creator)
   */
  "get-actions-id-member": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of member fields */
        fields?: "all" | (components["schemas"]["MemberFields"])[];
      };
      path: {
        /** @description The ID of the Action */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Member"];
        };
      };
    };
  };
  /**
   * Get the Member Creator of an Action 
   * @description Get the Member who created the Action
   */
  "get-actions-id-membercreator": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of member fields */
        fields?: "all" | (components["schemas"]["MemberFields"])[];
      };
      path: {
        /** @description The ID of the Action */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Member"];
        };
      };
    };
  };
  /**
   * Get the Organization of an Action 
   * @description Get the Organization of an Action
   */
  "get-actions-id-organization": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of organization fields */
        fields?: "all" | (components["schemas"]["OrganizationFields"])[];
      };
      path: {
        /** @description The ID of the action */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
    };
  };
  /**
   * Update a Comment Action 
   * @description Update a comment action
   */
  "put-actions-id-text": {
    parameters: {
      query: {
        /** @description The new text for the comment */
        value: string;
      };
      path: {
        /** @description The ID of the action to update */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Action's Reactions 
   * @description List reactions for an action
   */
  "get-actions-idaction-reactions": {
    parameters: {
      query: {
        /** @description Whether to load the member as a nested resource. See [Members Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#members-nested-resource) */
        member?: boolean;
        /** @description Whether to load the emoji as a nested resource. */
        emoji?: boolean;
      };
      path: {
        /** @description The ID of the action */
        idAction: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Create Reaction for Action 
   * @description Adds a new reaction to an action
   */
  "post-actions-idaction-reactions": {
    parameters: {
      path: {
        /** @description The ID of the action */
        idAction: components["schemas"]["TrelloID"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description The primary `shortName` of the emoji to add. See [/emoji](#emoji) */
          shortName?: string;
          /** @description The `skinVariation` of the emoji to add. See [/emoji](#emoji) */
          skinVariation?: string;
          /** @description The emoji to add as a native unicode emoji. See [/emoji](#emoji) */
          native?: string;
          /** @description The `unified` value of the emoji to add. See [/emoji](#emoji) */
          unified?: string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Action's Reaction 
   * @description Get information for a reaction
   */
  "get-actions-idaction-reactions-id": {
    parameters: {
      query: {
        /** @description Whether to load the member as a nested resource. See [Members Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#members-nested-resource) */
        member?: boolean;
        /** @description Whether to load the emoji as a nested resource. */
        emoji?: boolean;
      };
      path: {
        /** @description The ID of the Action */
        idAction: components["schemas"]["TrelloID"];
        /** @description The ID of the reaction */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Delete Action's Reaction 
   * @description Deletes a reaction
   */
  "delete-actions-idaction-reactions-id": {
    parameters: {
      path: {
        /** @description The ID of the Action */
        idAction: components["schemas"]["TrelloID"];
        /** @description The ID of the reaction */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * List Action's summary of Reactions 
   * @description List a summary of all reactions for an action
   */
  "get-actions-idaction-reactionsummary": {
    parameters: {
      path: {
        /** @description The ID of the action */
        idAction: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Get Application's compliance data */
  "applications-key-compliance": {
    parameters: {
      path: {
        key: string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Batch Requests 
   * @description Make up to 10 GET requests in a single, batched API call.
   */
  "get-batch": {
    parameters: {
      query: {
        /** @description A list of API routes. Maximum of 10 routes allowed. The routes should begin with a forward slash and should not include the API version number - e.g. "urls=/members/trello,/cards/[cardId]" */
        urls: string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Memberships of a Board 
   * @description Get information about the memberships users have to the board.
   */
  "get-boards-id-memberships": {
    parameters: {
      query: {
        /** @description One of `admins`, `all`, `none`, `normal` */
        filter?: "admins" | "all" | "none" | "normal";
        /** @description Works for premium organizations only. */
        activity?: boolean;
        /** @description Shows the type of member to the org the user is. For instance, an org admin will have a `orgMemberType` of `admin`. */
        orgMemberType?: boolean;
        /** @description Determines whether to include a [nested member object](/cloud/trello/guides/rest-api/nested-resources/). */
        member?: boolean;
        /** @description Fields to show if `member=true`. Valid values: [nested member resource fields](/cloud/trello/guides/rest-api/nested-resources/). */
        member_fields?: components["schemas"]["MemberFields"];
      };
      path: {
        /** @description The ID of the board */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Memberships"];
        };
      };
    };
  };
  /**
   * Get a Board 
   * @description Request a single board.
   */
  "get-boards-id": {
    parameters: {
      query: {
        /** @description This is a nested resource. Read more about actions as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/). */
        actions?: string;
        /** @description Valid values are one of: `mine` or `none`. */
        boardStars?: string;
        /** @description This is a nested resource. Read more about cards as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/). */
        cards?: string;
        /** @description Use with the `cards` param to include card pluginData with the response */
        card_pluginData?: boolean;
        /** @description This is a nested resource. Read more about checklists as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/). */
        checklists?: string;
        /** @description This is a nested resource. Read more about custom fields as nested resources [here](#custom-fields-nested-resource). */
        customFields?: boolean;
        /** @description The fields of the board to be included in the response. Valid values: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idMemberCreator, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed, url */
        fields?: string;
        /** @description This is a nested resource. Read more about labels as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/). */
        labels?: string;
        /** @description This is a nested resource. Read more about lists as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/). */
        lists?: string;
        /** @description This is a nested resource. Read more about members as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/). */
        members?: string;
        /** @description This is a nested resource. Read more about memberships as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/). */
        memberships?: string;
        /** @description Determines whether the pluginData for this board should be returned. Valid values: true or false. */
        pluginData?: boolean;
        /** @description This is a nested resource. Read more about organizations as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/). */
        organization?: boolean;
        /** @description Use with the `organization` param to include organization pluginData with the response */
        organization_pluginData?: boolean;
        myPrefs?: boolean;
        /** @description Also known as collections, tags, refer to the collection(s) that a Board belongs to. */
        tags?: boolean;
      };
      path: {
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Board"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      /** @description Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Update a Board 
   * @description Update an existing board by id
   */
  "put-boards-id": {
    parameters: {
      query: {
        /** @description The new name for the board. 1 to 16384 characters long. */
        name?: string;
        /** @description A new description for the board, 0 to 16384 characters long */
        desc?: string;
        /** @description Whether the board is closed */
        closed?: boolean;
        /** @description Whether the acting user is subscribed to the board */
        subscribed?: components["schemas"]["TrelloID"];
        /** @description The id of the Workspace the board should be moved to */
        idOrganization?: string;
        /** @description One of: org, private, public */
        "prefs/permissionLevel"?: string;
        /** @description Whether Workspace members can join the board themselves */
        "prefs/selfJoin"?: boolean;
        /** @description Whether card covers should be displayed on this board */
        "prefs/cardCovers"?: boolean;
        /** @description Determines whether the Voting Power-Up should hide who voted on cards or not. */
        "prefs/hideVotes"?: boolean;
        /** @description Who can invite people to this board. One of: admins, members */
        "prefs/invitations"?: string;
        /** @description Who can vote on this board. One of disabled, members, observers, org, public */
        "prefs/voting"?: string;
        /** @description Who can comment on cards on this board. One of: disabled, members, observers, org, public */
        "prefs/comments"?: string;
        /** @description The id of a custom background or one of: blue, orange, green, red, purple, pink, lime, sky, grey */
        "prefs/background"?: string;
        /** @description One of: pirate, regular */
        "prefs/cardAging"?: string;
        /** @description Determines whether the calendar feed is enabled or not. */
        "prefs/calendarFeedEnabled"?: boolean;
        /** @description Name for the green label. 1 to 16384 characters long */
        "labelNames/green"?: string;
        /** @description Name for the yellow label. 1 to 16384 characters long */
        "labelNames/yellow"?: string;
        /** @description Name for the orange label. 1 to 16384 characters long */
        "labelNames/orange"?: string;
        /** @description Name for the red label. 1 to 16384 characters long */
        "labelNames/red"?: string;
        /** @description Name for the purple label. 1 to 16384 characters long */
        "labelNames/purple"?: string;
        /** @description Name for the blue label. 1 to 16384 characters long */
        "labelNames/blue"?: string;
      };
      path: {
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Delete a Board 
   * @description Delete a board.
   */
  "delete-boards-id": {
    parameters: {
      path: {
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get a field on a Board 
   * @description Get a single, specific field on a board
   */
  "get-boards-id-field": {
    parameters: {
      path: {
        /** @description The ID of the board. */
        id: string;
        /** @description The field you'd like to receive. Valid values: closed, dateLastActivity, dateLastView, desc, descData, idMemberCreator, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed, url. */
        field: string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Get Actions of a Board */
  "get-boards-id-actions": {
    parameters: {
      query: {
        /** @description The fields to be returned for the Actions. [See Action fields here](/cloud/trello/guides/rest-api/object-definitions/#action-object). */
        fields?: components["schemas"]["Action"];
        /** @description A comma-separated list of [action types](/cloud/trello/guides/rest-api/action-types/). */
        filter?: string;
        /** @description The format of the returned Actions. Either list or count. */
        format?: string;
        /** @description A comma-separated list of idModels. Only actions related to these models will be returned. */
        idModels?: string;
        /** @description The limit of the number of responses, between 0 and 1000. */
        limit?: number;
        /** @description Whether to return the member object for each action. */
        member?: boolean;
        /** @description The fields of the [member](/cloud/trello/guides/rest-api/object-definitions/#member-object) to return. */
        member_fields?: string;
        /** @description Whether to return the memberCreator object for each action. */
        memberCreator?: boolean;
        /** @description The fields of the [member](/cloud/trello/guides/rest-api/object-definitions/#member-object) creator to return */
        memberCreator_fields?: string;
        /** @description The page of results for actions. */
        page?: number;
        /** @description Whether to show reactions on comments or not. */
        reactions?: boolean;
        /** @description An Action ID */
        before?: string;
        /** @description An Action ID */
        since?: string;
      };
      path: {
        boardId: string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get a Card on a Board 
   * @description Get a single Card on a Board.
   */
  "get-boards-id-cards-idcard": {
    parameters: {
      query: {
        /** @description The fields to be returned for the Actions. [See Action fields here](/cloud/trello/guides/rest-api/object-definitions/#action-object). */
        fields?: components["schemas"]["Action"];
        /** @description A comma-separated list of [action types](/cloud/trello/guides/rest-api/action-types/). */
        filter?: string;
        /** @description The format of the returned Actions. Either list or count. */
        format?: string;
        /** @description A comma-separated list of idModels. Only actions related to these models will be returned. */
        idModels?: string;
        /** @description The limit of the number of responses, between 0 and 1000. */
        limit?: number;
        /** @description Whether to return the member object for each action. */
        member?: boolean;
        /** @description The fields of the [member](/cloud/trello/guides/rest-api/object-definitions/#member-object) to return. */
        member_fields?: string;
        /** @description Whether to return the memberCreator object for each action. */
        memberCreator?: boolean;
        /** @description The fields of the [member](/cloud/trello/guides/rest-api/object-definitions/#member-object) creator to return */
        memberCreator_fields?: string;
        /** @description The page of results for actions. */
        page?: number;
        /** @description Whether to show reactions on comments or not. */
        reactions?: boolean;
        /** @description An Action ID */
        before?: string;
        /** @description An Action ID */
        since?: string;
      };
      path: {
        /** @description The ID of the board */
        id: string;
        /** @description The id the card to retrieve. */
        idCard: string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Get boardStars on a Board */
  "get-boards-id-boardstars": {
    parameters: {
      query: {
        /** @description Valid values: mine, none */
        filter?: string;
      };
      path: {
        boardId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["BoardStars"])[];
        };
      };
    };
  };
  /**
   * Get Checklists on a Board 
   * @description Get all of the checklists on a Board.
   */
  "boards-id-checklists": {
    parameters: {
      path: {
        /** @description The ID of the board */
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Cards on a Board 
   * @description Get all of the open Cards on a Board.
   */
  "get-boards-id-cards": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get filtered Cards on a Board 
   * @description Get the Cards on a Board that match a given filter.
   */
  "get-boards-id-cards-filter": {
    parameters: {
      path: {
        /** @description ID of the Board */
        id: string;
        /** @description Valid Values: all, closed, none, open, visible. */
        filter: "all" | "closed" | "none" | "open" | "visible";
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Custom Fields for Board 
   * @description Get the Custom Field Definitions that exist on a board.
   */
  "get-boards-id-customfields": {
    parameters: {
      path: {
        /** @description The ID of the board */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["CustomField"])[];
        };
      };
    };
  };
  /**
   * Get Labels on a Board 
   * @description Get all of the Labels on a Board.
   */
  "get-boards-id-labels": {
    parameters: {
      query: {
        /** @description The fields to be returned for the Labels. */
        fields?: components["schemas"]["Label"];
        /** @description The number of Labels to be returned. */
        limit?: number;
      };
      path: {
        /** @description The ID of the Board. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Create a Label on a Board 
   * @description Create a new Label on a Board.
   */
  "post-boards-id-labels": {
    parameters: {
      query: {
        /** @description The name of the label to be created. 1 to 16384 characters long. */
        name: string;
        /** @description Sets the color of the new label. Valid values are a label color or `null`. */
        color: string;
      };
      path: {
        /** @description The id of the board to update */
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Lists on a Board 
   * @description Get the Lists on a Board
   */
  "get-boards-id-lists": {
    parameters: {
      query: {
        /** @description Filter to apply to Cards. */
        cards?: components["schemas"]["ViewFilter"];
        /** @description `all` or a comma-separated list of card [fields](/cloud/trello/guides/rest-api/object-definitions/#card-object) */
        card_fields?: "all" | (components["schemas"]["CardFields"])[];
        /** @description Filter to apply to Lists */
        filter?: components["schemas"]["ViewFilter"];
        /** @description `all` or a comma-separated list of list [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["ListFields"])[];
      };
      path: {
        /** @description The ID of the board */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["TrelloList"])[];
        };
      };
    };
  };
  /**
   * Create a List on a Board 
   * @description Create a new List on a Board.
   */
  "post-boards-id-lists": {
    parameters: {
      query: {
        /** @description The name of the list to be created. 1 to 16384 characters long. */
        name: string;
        /** @description Determines the position of the list. Valid values: `top`, `bottom`, or a positive number. */
        pos?: string;
      };
      path: {
        /** @description The ID of the board */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["TrelloList"];
        };
      };
    };
  };
  /** Get filtered Lists on a Board */
  "get-boards-id-lists-filter": {
    parameters: {
      path: {
        /** @description The ID of the board */
        id: components["schemas"]["TrelloID"];
        /** @description One of `all`, `closed`, `none`, `open` */
        filter: components["schemas"]["ViewFilter"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get the Members of a Board 
   * @description Get the Members for a board
   */
  "get-boards-id-members": {
    parameters: {
      path: {
        /** @description The ID of the board */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Invite Member to Board via email 
   * @description Invite a Member to a Board via their email address.
   */
  "put-boards-id-members": {
    parameters: {
      query: {
        /** @description The email address of a user to add as a member of the board. */
        email: string;
        /** @description Valid values: admin, normal, observer. Determines what type of member the user being added should be of the board. */
        type?: "admin" | "normal" | "observer";
      };
      path: {
        /** @description The ID of the board */
        id: components["schemas"]["TrelloID"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description The full name of the user to as a member of the board. Must have a length of at least 1 and cannot begin nor end with a space. */
          fullName?: string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Add a Member to a Board 
   * @description Add a member to the board.
   */
  "put-boards-id-members-idmember": {
    parameters: {
      query: {
        /** @description One of: admin, normal, observer. Determines the type of member this user will be on the board. */
        type: "admin" | "normal" | "observer";
        /** @description Optional param that allows organization admins to add multi-board guests onto a board. */
        allowBillableGuest?: boolean;
      };
      path: {
        /** @description The id of the board to update */
        id: components["schemas"]["TrelloID"];
        /** @description The id of the member to add to the board. */
        idMember: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Remove Member from Board */
  boardsidmembersidmember: {
    parameters: {
      path: {
        /** @description The id of the board to update */
        id: components["schemas"]["TrelloID"];
        /** @description The id of the member to add to the board. */
        idMember: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Update Membership of Member on a Board 
   * @description Update an existing board by id
   */
  "put-boards-id-memberships-idmembership": {
    parameters: {
      query: {
        /** @description One of: admin, normal, observer. Determines the type of member that this membership will be to this board. */
        type: "admin" | "normal" | "observer";
        /** @description Valid values: all, avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username */
        member_fields?: "all" | "avatarHash" | "bio" | "bioData" | "confirmed" | "fullName" | "idPremOrgsAdmin" | "initials" | "memberType" | "products" | "status" | "url" | "username";
      };
      path: {
        /** @description The id of the board to update */
        id: components["schemas"]["TrelloID"];
        /** @description The id of a membership that should be added to this board. */
        idMembership: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Update emailPosition Pref on a Board 
   * @description Update emailPosition Pref on a Board
   */
  "put-boards-id-myprefs-emailposition": {
    parameters: {
      query: {
        /** @description Valid values: bottom, top. Determines the position of the email address. */
        value: "bottom" | "top";
      };
      path: {
        /** @description The id of the board to update */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Update idEmailList Pref on a Board 
   * @description Change the default list that email-to-board cards are created in.
   */
  "put-boards-id-myprefs-idemaillist": {
    parameters: {
      query: {
        /** @description The id of an email list. */
        value: components["schemas"]["TrelloID"];
      };
      path: {
        /** @description The id of the board to update */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Update showListGuide Pref on a Board */
  "put-boards-id-myPrefs-showlistguide": {
    parameters: {
      query: {
        /** @description Determines whether to show the list guide. */
        value: boolean;
      };
      path: {
        /** @description The id of the board to update */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Update showSidebar Pref on a Board */
  "put-boards-id-myPrefs-showsidebar": {
    parameters: {
      query: {
        /** @description Determines whether to show the side bar. */
        value: boolean;
      };
      path: {
        /** @description The id of the board to update */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Update showSidebarActivity Pref on a Board */
  "put-boards-id-myPrefs-showsidebaractivity": {
    parameters: {
      query: {
        /** @description Determines whether to show sidebar activity. */
        value: boolean;
      };
      path: {
        /** @description The id of the board to update */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Update showSidebarBoardActions Pref on a Board */
  "put-boards-id-myPrefs-showsidebarboardactions": {
    parameters: {
      query: {
        /** @description Determines whether to show the sidebar board actions. */
        value: boolean;
      };
      path: {
        /** @description The id of the board to update */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Update showSidebarMembers Pref on a Board */
  "put-boards-id-myPrefs-showsidebarmembers": {
    parameters: {
      query: {
        /** @description Determines whether to show members of the board in the sidebar. */
        value: boolean;
      };
      path: {
        /** @description The id of the board to update */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Create a Board 
   * @description Create a new board.
   */
  "post-boards": {
    parameters: {
      query: {
        /** @description The new name for the board. 1 to 16384 characters long. */
        name: string;
        /** @description Determines whether to use the default set of labels. */
        defaultLabels?: boolean;
        /** @description Determines whether to add the default set of lists to a board (To Do, Doing, Done). It is ignored if `idBoardSource` is provided. */
        defaultLists?: boolean;
        /** @description A new description for the board, 0 to 16384 characters long */
        desc?: string;
        /** @description The id or name of the Workspace the board should belong to. */
        idOrganization?: components["schemas"]["TrelloID"];
        /** @description The id of a board to copy into the new board. */
        idBoardSource?: components["schemas"]["TrelloID"];
        /** @description To keep cards from the original board pass in the value `cards` */
        keepFromSource?: "cards" | "none";
        /** @description The Power-Ups that should be enabled on the new board. One of: `all`, `calendar`, `cardAging`, `recap`, `voting`. */
        powerUps?: "all" | "calendar" | "cardAging" | "recap" | "voting";
        /** @description The permissions level of the board. One of: `org`, `private`, `public`. */
        prefs_permissionLevel?: "org" | "private" | "public";
        /** @description Who can vote on this board. One of `disabled`, `members`, `observers`, `org`, `public`. */
        prefs_voting?: "disabled" | "members" | "observers" | "org" | "public";
        /** @description Who can comment on cards on this board. One of: `disabled`, `members`, `observers`, `org`, `public`. */
        prefs_comments?: "disabled" | "members" | "observers" | "org" | "public";
        /** @description Determines what types of members can invite users to join. One of: `admins`, `members`. */
        prefs_invitations?: "members" | "admins";
        /** @description Determines whether users can join the boards themselves or whether they have to be invited. */
        prefs_selfJoin?: boolean;
        /** @description Determines whether card covers are enabled. */
        prefs_cardCovers?: boolean;
        /** @description The id of a custom background or one of: `blue`, `orange`, `green`, `red`, `purple`, `pink`, `lime`, `sky`, `grey`. */
        prefs_background?: "blue" | "orange" | "green" | "red" | "purple" | "pink" | "lime" | "sky" | "grey";
        /** @description Determines the type of card aging that should take place on the board if card aging is enabled. One of: `pirate`, `regular`. */
        prefs_cardAging?: "pirate" | "regular";
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Create a calendarKey for a Board 
   * @description Create a new board.
   */
  "post-boards-id-calendarkey-generate": {
    parameters: {
      path: {
        /** @description The id of the board to update */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Create a emailKey for a Board */
  "post-boards-id-emailkey-generate": {
    parameters: {
      path: {
        /** @description The id of the board to update */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Create a Tag for a Board */
  "post-boards-id-idtags": {
    parameters: {
      query: {
        /** @description The id of a tag from the organization to which this board belongs. */
        value: components["schemas"]["TrelloID"];
      };
      path: {
        /** @description The id of the board to update */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Mark Board as viewed */
  "post-boards-id-markedasviewed": {
    parameters: {
      path: {
        /** @description The id of the board to update */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Enabled Power-Ups on Board 
   * @description Get the enabled Power-Ups on a board
   */
  "get-boards-id-boardplugins": {
    parameters: {
      path: {
        /** @description The ID of the Board */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Plugin"])[];
        };
      };
    };
  };
  /**
   * Enable a Power-Up on a Board 
   * @deprecated 
   * @description Enable a Power-Up on a Board
   */
  "post-boards-id-boardplugins": {
    parameters: {
      query: {
        /** @description The ID of the Power-Up to enable */
        idPlugin?: components["schemas"]["TrelloID"];
      };
      path: {
        /** @description The ID of the Board */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Disable a Power-Up on a Board 
   * @deprecated 
   * @description Disable a Power-Up on a board
   */
  "delete-boards-id-boardplugins": {
    parameters: {
      path: {
        /** @description The ID of the board */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the Power-Up to disable */
        idPlugin: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Power-Ups on a Board 
   * @description List the Power-Ups on a board
   */
  "get-board-id-plugins": {
    parameters: {
      query: {
        /** @description One of: `enabled` or `available` */
        filter?: "enabled" | "available";
      };
      path: {
        /** @description The ID of the board */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  /**
   * Create a new Card 
   * @description Create a new card
   */
  "post-cards": {
    parameters: {
      query: {
        /** @description The name for the card */
        name?: string;
        /** @description The description for the card */
        desc?: string;
        /** @description The position of the new card. `top`, `bottom`, or a positive float */
        pos?: ("top" | "bottom") | number;
        /** @description A due date for the card */
        due?: string;
        /** @description The start date of a card, or `null` */
        start?: string | null;
        dueComplete?: boolean;
        /** @description The ID of the list the card should be created in */
        idList: components["schemas"]["TrelloID"];
        /** @description Comma-separated list of member IDs to add to the card */
        idMembers?: (components["schemas"]["TrelloID"])[];
        /** @description Comma-separated list of label IDs to add to the card */
        idLabels?: (components["schemas"]["TrelloID"])[];
        /** @description A URL starting with `http://` or `https://` */
        urlSource?: string;
        fileSource?: string;
        /** @description The mimeType of the attachment. Max length 256 */
        mimeType?: string;
        /** @description The ID of a card to copy into the new card */
        idCardSource?: components["schemas"]["TrelloID"];
        /** @description If using `idCardSource` you can specify which properties to copy over. `all` or comma-separated list of: `attachments,checklists,customFields,comments,due,start,labels,members,start,stickers` */
        keepFromSource?: "all" | (("attachments" | "checklists" | "comments" | "customFields" | "due" | "start" | "labels" | "members" | "stickers")[]);
        /** @description For use with/by the Map View */
        address?: string;
        /** @description For use with/by the Map View */
        locationName?: string;
        /** @description For use with/by the Map View. Should take the form latitude,longitude */
        coordinates?: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Card"];
        };
      };
    };
  };
  /**
   * Get a Card 
   * @description Get a card by its ID
   */
  "get-cards-id": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of [fields](/cloud/trello/guides/rest-api/object-definitions/). **Defaults**: `badges, checkItemStates, closed, dateLastActivity, desc, descData, due, start, email, idBoard, idChecklists, idLabels, idList, idMembers, idShort, idAttachmentCover, manualCoverAttachment, labels, name, pos, shortUrl, url` */
        fields?: "all" | (("badges" | "checkItemStates" | "closed" | "dateLastActivity" | "desc" | "descData" | "due" | "start" | "email" | "idBoard" | "idChecklists" | "idLabels" | "idList" | "idMembers" | "idShort" | "idAttachmentCover" | "manualCoverAttachment" | "labels" | "name" | "pos" | "shortUrl" | "url")[]);
        /** @description See the [Actions Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#actions-nested-resource) */
        actions?: string;
        /** @description `true`, `false`, or `cover` */
        attachments?: "cover" | boolean;
        /** @description `all` or a comma-separated list of attachment [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        attachment_fields?: "all" | (components["schemas"]["AttachmentFields"])[];
        /** @description Whether to return member objects for members on the card */
        members?: boolean;
        /** @description `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/). **Defaults**: `avatarHash, fullName, initials, username` */
        member_fields?: "all" | (components["schemas"]["MemberFields"])[];
        /** @description Whether to return member objects for members who voted on the card */
        membersVoted?: boolean;
        /** @description `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/). **Defaults**: `avatarHash, fullName, initials, username` */
        memberVoted_fields?: "all" | (components["schemas"]["MemberFields"])[];
        checkItemStates?: boolean;
        /** @description Whether to return the checklists on the card. `all` or `none` */
        checklists?: string;
        /** @description `all` or a comma-separated list of `idBoard,idCard,name,pos` */
        checklist_fields?: "all" | (("idBoard" | "idCard" | "name" | "pos")[]);
        /** @description Whether to return the board object the card is on */
        board?: boolean;
        /** @description `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/#board-object). **Defaults**: `name, desc, descData, closed, idOrganization, pinned, url, prefs` */
        board_fields?: "all" | (components["schemas"]["BoardFields"])[];
        /** @description See the [Lists Nested Resource](/cloud/trello/guides/rest-api/nested-resources/) */
        list?: boolean;
        /** @description Whether to include pluginData on the card with the response */
        pluginData?: boolean;
        /** @description Whether to include sticker models with the response */
        stickers?: boolean;
        /** @description `all` or a comma-separated list of sticker [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        sticker_fields?: "all" | (components["schemas"]["CustomSticker"])[];
        /** @description Whether to include the customFieldItems */
        customFieldItems?: boolean;
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Card"];
        };
      };
    };
  };
  /**
   * Update a Card 
   * @description Update a card
   */
  "put-cards-id": {
    parameters: {
      query: {
        /** @description The new name for the card */
        name?: string;
        /** @description The new description for the card */
        desc?: string;
        /** @description Whether the card should be archived (closed: true) */
        closed?: boolean;
        /** @description Comma-separated list of member IDs */
        idMembers?: components["schemas"]["TrelloID"];
        /** @description The ID of the image attachment the card should use as its cover, or null for none */
        idAttachmentCover?: components["schemas"]["TrelloID"];
        /** @description The ID of the list the card should be in */
        idList?: components["schemas"]["TrelloID"];
        /** @description Comma-separated list of label IDs */
        idLabels?: components["schemas"]["TrelloID"];
        /** @description The ID of the board the card should be on */
        idBoard?: components["schemas"]["TrelloID"];
        /** @description The position of the card in its list. `top`, `bottom`, or a positive float */
        pos?: ("top" | "bottom") | number;
        /** @description When the card is due, or `null` */
        due?: string | null;
        /** @description The start date of a card, or `null` */
        start?: string | null;
        /** @description Whether the due date should be marked complete */
        dueComplete?: boolean;
        /** @description Whether the member is should be subscribed to the card */
        subscribed?: boolean;
        /** @description For use with/by the Map View */
        address?: string;
        /** @description For use with/by the Map View */
        locationName?: string;
        /** @description For use with/by the Map View. Should be latitude,longitude */
        coordinates?: string;
        /**
         * @description Updates the card's cover
         *  | Option | Values | About |
         *  |--------|--------|-------|
         *  | color | `pink`, `yellow`, `lime`, `blue`, `black`, `orange`, `red`, `purple`, `sky`, `green` | Makes the cover a solid color . |
         *  | brightness | `dark`, `light` | Determines whether the text on the cover should be dark or light.
         *  | url | An unsplash URL: https://images.unsplash.com | Used if making an image the cover. Only Unsplash URLs work.
         *  | idAttachment | ID of an attachment on the card | Used if setting an attached image as the cover. |
         *  | size | `normal`, `full` | Determines whether to show the card name on the cover, or below it. |
         *  
         *  `brightness` can be sent alongside any of the other parameters, but all of the other parameters are mutually exclusive; you can not have the cover be a `color` and an `idAttachment` at the same time. 
         *  
         *  On the brightness options, setting it to light will make the text on the card cover dark:
         *  ![](/cloud/trello/images/rest/cards/cover-brightness-dark.png)
         *  
         *  And vice versa, setting it to dark will make the text on the card cover light: 
         *  ![](/cloud/trello/images/rest/cards/cover-brightness-light.png)
         */
        cover?: {
          /**
           * @description An object containing information regarding the card's cover 
           *  `brightness` can be sent alongside any of the other parameters, but all of the other parameters are mutually exclusive; you can not have the cover be a color and an `idAttachment` at the same time.
           */
          value?: {
            /**
             * @description One of: `pink, yellow, lime, blue, black, orange, red, purple, sky, green` 
             * @example pink 
             * @enum {string}
             */
            color?: "pink" | "yellow" | "lime" | "blue" | "black" | "orange" | "red" | "purple" | "sky" | "green";
            /**
             * @description Determines whether the text on the cover should be dark or light. Setting it to `light` will make the text on the card cover dark. And vice versa, setting it to dark will make the text on the card cover light 
             * @enum {string}
             */
            brightness?: "dark" | "light";
            /**
             * Format: url 
             * @description Used if making an image the cover. Only Unsplash URLs (https://images.unsplash.com/) work.
             */
            url?: string;
          };
        };
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Card"];
        };
      };
    };
  };
  /**
   * Delete a Card 
   * @description Delete a Card
   */
  "delete-cards-id": {
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get a field on a Card 
   * @description Get a specific property of a card
   */
  "get-cards-id-field": {
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
        /** @description The desired field. */
        field: components["schemas"]["CardFields"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Card"];
        };
      };
    };
  };
  /**
   * Get Actions on a Card 
   * @description List the Actions on a Card
   */
  "get-cards-id-actions": {
    parameters: {
      query: {
        /** @description A comma-separated list of [action types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/). */
        filter?: string;
        /** @description The page of results for actions. Each page of results has 50 actions. */
        page?: number;
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Action"])[];
        };
      };
    };
  };
  /**
   * Get Attachments on a Card 
   * @description List the attachments on a card
   */
  "get-cards-id-attachments": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of attachment [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["AttachmentFields"])[];
        /** @description Use `cover` to restrict to just the cover attachment */
        filter?: string;
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Attachment"])[];
        };
      };
    };
  };
  /**
   * Create Attachment On Card 
   * @description Create an Attachment to a Card
   */
  "post-cards-id-attachments": {
    parameters: {
      query: {
        /** @description The name of the attachment. Max length 256. */
        name?: string;
        /** @description The file to attach, as multipart/form-data */
        file?: string;
        /** @description The mimeType of the attachment. Max length 256 */
        mimeType?: string;
        /** @description A URL to attach. Must start with `http://` or `https://` */
        url?: string;
        /** @description Determines whether to use the new attachment as a cover for the Card. */
        setCover?: boolean;
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Attachment"])[];
        };
      };
    };
  };
  /**
   * Get an Attachment on a Card 
   * @description Get a specific Attachment on a Card.
   */
  "get-cards-id-attachments-idattachment": {
    parameters: {
      query: {
        /** @description The Attachment fields to be included in the response. */
        fields?: (components["schemas"]["AttachmentFields"])[];
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the Attachment */
        idAttachment: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Attachment"])[];
        };
      };
    };
  };
  /**
   * Delete an Attachment on a Card 
   * @description Delete an Attachment
   */
  "deleted-cards-id-attachments-idattachment": {
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the Attachment */
        idAttachment: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get the Board the Card is on 
   * @description Get the board a card is on
   */
  "get-cards-id-board": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/#board-object) */
        fields?: "all" | (components["schemas"]["BoardFields"])[];
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get checkItems on a Card 
   * @description Get the completed checklist items on a card
   */
  "get-cards-id-checkitemstates": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of: `idCheckItem`, `state` */
        fields?: "all" | (("idCheckItem" | "state")[]);
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Checklists on a Card 
   * @description Get the checklists on a card
   */
  "get-cards-id-checklists": {
    parameters: {
      query: {
        /** @description `all` or `none` */
        checkItems?: "all" | "none";
        /** @description `all` or a comma-separated list of: `name,nameData,pos,state,type,due,dueReminder,idMember` */
        checkItem_fields?: "all" | (("name" | "nameData" | "pos" | "state" | "type" | "due" | "dueReminder" | "idMember")[]);
        /** @description `all` or `none` */
        filter?: "all" | "none";
        /** @description `all` or a comma-separated list of: `idBoard,idCard,name,pos` */
        fields?: "all" | (("all" | "name" | "nameData" | "pos" | "state" | "type")[]);
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Create Checklist on a Card 
   * @description Create a new checklist on a card
   */
  "post-cards-id-checklists": {
    parameters: {
      query: {
        /** @description The name of the checklist */
        name?: string;
        /** @description The ID of a source checklist to copy into the new one */
        idChecklistSource?: components["schemas"]["TrelloID"];
        /** @description The position of the checklist on the card. One of: `top`, `bottom`, or a positive number. */
        pos?: string;
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get checkItem on a Card 
   * @description Get a specific checkItem on a card
   */
  "get-cards-id-checkitem-idcheckitem": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of `name,nameData,pos,state,type,due,dueReminder,idMember` */
        fields?: "all" | (("name" | "nameData" | "pos" | "state" | "due" | "dueReminder" | "idMember")[]);
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the checkitem */
        idCheckItem: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Update a checkItem on a Card 
   * @description Update an item in a checklist on a card.
   */
  "put-cards-id-checkitem-idcheckitem": {
    parameters: {
      query: {
        /** @description The new name for the checklist item */
        name?: string;
        /** @description One of: `complete`, `incomplete` */
        state?: "complete" | "incomplete";
        /** @description The ID of the checklist this item is in */
        idChecklist?: components["schemas"]["TrelloID"];
        /** @description `top`, `bottom`, or a positive float */
        pos?: components["schemas"]["posStringOrNumber"];
        /** @description A due date for the checkitem */
        due?: string;
        /** @description A dueReminder for the due date on the checkitem */
        dueReminder?: number | null;
        /** @description The ID of the member to remove from the card */
        idMember?: components["schemas"]["TrelloID"];
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the checkitem */
        idCheckItem: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Delete checkItem on a Card 
   * @description Delete a checklist item
   */
  "delete-cards-id-checkitem-idcheckitem": {
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the checkitem */
        idCheckItem: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get the List of a Card 
   * @description Get the list a card is in
   */
  "get-cards-id-list": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of list [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["ListFields"])[];
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get the Members of a Card 
   * @description Get the members on a card
   */
  "get-cards-id-members": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["MemberFields"])[];
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Members who have voted on a Card 
   * @description Get the members who have voted on a card
   */
  "get-cards-id-membersvoted": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["MemberFields"])[];
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Add Member vote to Card 
   * @description Vote on the card for a given member.
   */
  "cardsidmembersvoted-1": {
    parameters: {
      query: {
        /** @description The ID of the member to vote 'yes' on the card */
        value: components["schemas"]["TrelloID"];
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get pluginData on a Card 
   * @description Get any shared pluginData on a card.
   */
  "get-cards-id-plugindata": {
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Stickers on a Card 
   * @description Get the stickers on a card
   */
  "get-cards-id-stickers": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of sticker [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["CustomSticker"])[];
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Add a Sticker to a Card 
   * @description Add a sticker to a card
   */
  "post-cards-id-stickers": {
    parameters: {
      query: {
        /** @description For custom stickers, the id of the sticker. For default stickers, the string identifier (like 'taco-cool', see below) */
        image: string;
        /** @description The top position of the sticker, from -60 to 100 */
        top: number;
        /** @description The left position of the sticker, from -60 to 100 */
        left: number;
        /** @description The z-index of the sticker */
        zIndex: number;
        /** @description The rotation of the sticker */
        rotate?: number;
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get a Sticker on a Card 
   * @description Get a specific sticker on a card
   */
  "get-cards-id-stickers-idsticker": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of sticker [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["CustomSticker"])[];
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the sticker */
        idSticker: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Update a Sticker on a Card 
   * @description Update a sticker on a card
   */
  "put-cards-id-stickers-idsticker": {
    parameters: {
      query: {
        /** @description The top position of the sticker, from -60 to 100 */
        top: number;
        /** @description The left position of the sticker, from -60 to 100 */
        left: number;
        /** @description The z-index of the sticker */
        zIndex: number;
        /** @description The rotation of the sticker */
        rotate?: number;
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the sticker */
        idSticker: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Delete a Sticker on a Card 
   * @description Remove a sticker from the card
   */
  "delete-cards-id-stickers-idsticker": {
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the sticker */
        idSticker: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Update Comment Action on a Card 
   * @description Update an existing comment
   */
  "put-cards-id-actions-idaction-comments": {
    parameters: {
      query: {
        /** @description The new text for the comment */
        text: string;
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the comment action to update */
        idAction: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Delete a comment on a Card 
   * @description Delete a comment
   */
  "delete-cards-id-actions-id-comments": {
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the comment action to update */
        idAction: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Update Custom Field item on Card 
   * @description Setting, updating, and removing the value for a Custom Field on a card. For more details on updating custom fields check out the [Getting Started With Custom Fields](/cloud/trello/guides/rest-api/getting-started-with-custom-fields/)
   */
  "put-cards-idcard-customfield-idcustomfield-item": {
    parameters: {
      path: {
        /** @description ID of the card that the Custom Field value should be set/updated for */
        idCard: components["schemas"]["TrelloID"];
        /** @description ID of the Custom Field on the card. */
        idCustomField: components["schemas"]["TrelloID"];
      };
    };
    requestBody?: {
      content: {
        "application/json": OneOf<[{
          /** @description An object containing the key and value to set for the card's Custom Field value. The key used to set the value should match the type of Custom Field defined. */
          value?: {
            text?: string;
            checked?: boolean;
            /**
             * Format: date-time 
             * @example 2018-03-13T16:00:00.000Z
             */
            date?: string;
            number?: number;
          };
        }, {
          /** @description The ID of the option for the list type Custom Field */
          idValue?: components["schemas"]["TrelloID"];
        }]>;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Custom Field Items for a Card 
   * @description Get the custom field items for a card.
   */
  "get-cards-id-customfielditems": {
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["CustomFieldItems"])[];
        };
      };
    };
  };
  /**
   * Add a new comment to a Card 
   * @description Add a new comment to a card
   */
  "post-cards-id-actions-comments": {
    parameters: {
      query: {
        /** @description The comment */
        text: string;
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Action"];
        };
      };
    };
  };
  /**
   * Add a Label to a Card 
   * @description Add a label to a card
   */
  "post-cards-id-idlabels": {
    parameters: {
      query: {
        /** @description The ID of the label to add */
        value?: components["schemas"]["TrelloID"];
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Add a Member to a Card 
   * @description Add a member to a card
   */
  "post-cards-id-idmembers": {
    parameters: {
      query: {
        /** @description The ID of the Member to add to the card */
        value?: components["schemas"]["TrelloID"];
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Create a new Label on a Card 
   * @description Create a new label for the board and add it to the given card.
   */
  "post-cards-id-labels": {
    parameters: {
      query: {
        /** @description A valid label color or `null`. See [labels](/cloud/trello/guides/rest-api/object-definitions/) */
        color: string;
        /** @description A name for the label */
        name?: string;
      };
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Mark a Card's Notifications as read 
   * @description Mark notifications about this card as read
   */
  "post-cards-id-markassociatednotificationsread": {
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Remove a Label from a Card 
   * @description Remove a label from a card
   */
  "delete-cards-id-idlabels-idlabel": {
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the label to remove */
        idLabel: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Remove a Member from a Card 
   * @description Remove a member from a card
   */
  "delete-id-idmembers-idmember": {
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the member to remove from the card */
        idMember: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Remove a Member's Vote on a Card 
   * @description Remove a member's vote from a card
   */
  "delete-cards-id-membersvoted-idmember": {
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the member whose vote to remove */
        idMember: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Update Checkitem on Checklist on Card 
   * @description Update an item in a checklist on a card.
   */
  "put-cards-idcard-checklist-idchecklist-checkitem-idcheckitem": {
    parameters: {
      query: {
        /** @description `top`, `bottom`, or a positive float */
        pos?: components["schemas"]["posStringOrNumber"];
      };
      path: {
        /** @description The ID of the Card */
        idCard: components["schemas"]["TrelloID"];
        /** @description The ID of the checklist item to update */
        idCheckItem: components["schemas"]["TrelloID"];
        /** @description The ID of the item to update. */
        idChecklist: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["CheckItem"];
        };
      };
    };
  };
  /**
   * Delete a Checklist on a Card 
   * @description Delete a checklist from a card
   */
  "delete-cards-id-checklists-idchecklist": {
    parameters: {
      path: {
        /** @description The ID of the Card */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the checklist to delete */
        idChecklist: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Create a Checklist */
  "post-checklists": {
    parameters: {
      query: {
        /** @description The ID of the Card that the checklist should be added to. */
        idCard: components["schemas"]["TrelloID"];
        /** @description The name of the checklist. Should be a string of length 1 to 16384. */
        name?: string;
        /** @description The position of the checklist on the card. One of: `top`, `bottom`, or a positive number. */
        pos?: components["schemas"]["posStringOrNumber"];
        /** @description The ID of a checklist to copy into the new checklist. */
        idChecklistSource?: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Get a Checklist */
  "get-checklists-id": {
    parameters: {
      query: {
        /** @description Valid values: `all`, `closed`, `none`, `open`, `visible`. Cards is a nested resource. The additional query params available are documented at [Cards Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#cards-nested-resource). */
        cards?: "all" | "closed" | "none" | "open" | "visible";
        /** @description The check items on the list to return. One of: `all`, `none`. */
        checkItems?: "all" | "none";
        /** @description The fields on the checkItem to return if checkItems are being returned. `all` or a comma-separated list of: `name`, `nameData`, `pos`, `state`, `type`, `due`, `dueReminder`, `idMember` */
        checkItem_fields?: "all" | (("name" | "nameData" | "pos" | "state" | "type" | "due" | "dueReminder" | "idMember")[]);
        /** @description `all` or a comma-separated list of checklist [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["Checklist"])[];
      };
      path: {
        /** @description ID of a checklist. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Update a Checklist 
   * @description Update an existing checklist.
   */
  "put-checlists-id": {
    parameters: {
      query: {
        /** @description Name of the new checklist being created. Should be length of 1 to 16384. */
        name?: string;
        /** @description Determines the position of the checklist on the card. One of: `top`, `bottom`, or a positive number. */
        pos?: components["schemas"]["posStringOrNumber"];
      };
      path: {
        /** @description ID of a checklist. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Delete a Checklist 
   * @description Delete a checklist
   */
  "delete-checklists-id": {
    parameters: {
      path: {
        /** @description ID of a checklist. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Get field on a Checklist */
  "get-checklists-id-field": {
    parameters: {
      path: {
        /** @description ID of a checklist. */
        id: components["schemas"]["TrelloID"];
        /** @description Field to update. */
        field: "name" | "pos";
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Update field on a Checklist */
  "put-checklists-id-field": {
    parameters: {
      query: {
        /** @description The value to change the checklist name to. Should be a string of length 1 to 16384. */
        value: components["schemas"]["posStringOrNumber"] | components["schemas"]["TrelloID"];
      };
      path: {
        /** @description ID of a checklist. */
        id: components["schemas"]["TrelloID"];
        /** @description Field to update. */
        field: "name" | "pos";
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Get the Board the Checklist is on */
  "get-checklists-id-board": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["BoardFields"])[];
      };
      path: {
        /** @description ID of a checklist. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Get the Card a Checklist is on */
  "get-checklists-id-cards": {
    parameters: {
      path: {
        /** @description ID of a checklist. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Get Checkitems on a Checklist */
  "get-checklists-id-checkitems": {
    parameters: {
      query: {
        /** @description One of: `all`, `none`. */
        filter?: "all" | "none";
        /** @description One of: `all`, `name`, `nameData`, `pos`, `state`,`type`, `due`, `dueReminder`, `idMember`. */
        fields?: "all" | "name" | "nameData" | "pos" | "state" | "type" | "due" | "dueReminder" | "idMember";
      };
      path: {
        /** @description ID of a checklist. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Create Checkitem on Checklist */
  "post-checklists-id-checkitems": {
    parameters: {
      query: {
        /** @description The name of the new check item on the checklist. Should be a string of length 1 to 16384. */
        name: string;
        /** @description The position of the check item in the checklist. One of: `top`, `bottom`, or a positive number. */
        pos?: components["schemas"]["posStringOrNumber"];
        /** @description Determines whether the check item is already checked when created. */
        checked?: boolean;
        /** @description A due date for the checkitem */
        due?: string;
        /** @description A dueReminder for the due date on the checkitem */
        dueReminder?: number | null;
        /** @description An ID of a member resource. */
        idMember?: components["schemas"]["TrelloID"];
      };
      path: {
        /** @description ID of a checklist. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Get a Checkitem on a Checklist */
  "get-checklists-id-checkitems-idcheckitem": {
    parameters: {
      query: {
        /** @description One of: `all`, `name`, `nameData`, `pos`, `state`, `type`, `due`, `dueReminder`, `idMember`,. */
        fields?: "all" | "name" | "nameData" | "pos" | "state" | "type" | "due" | "dueReminder" | "idMember";
      };
      path: {
        /** @description ID of a checklist. */
        id: components["schemas"]["TrelloID"];
        /** @description ID of the check item to retrieve. */
        idCheckItem: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Delete Checkitem from Checklist 
   * @description Remove an item from a checklist
   */
  "delete-checklists-id-checkitems-idcheckitem": {
    parameters: {
      path: {
        /** @description ID of a checklist. */
        id: components["schemas"]["TrelloID"];
        /** @description ID of the check item to retrieve. */
        idCheckItem: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Create a new Custom Field on a Board 
   * @description Create a new Custom Field on a board.
   */
  "post-customfields": {
    requestBody?: {
      content: {
        "application/json": {
          /** @description The ID of the model for which the Custom Field is being defined. This should always be the ID of a board. */
          idModel: components["schemas"]["TrelloID"];
          /**
           * @description The type of model that the Custom Field is being defined on. This should always be `board`. 
           * @enum {string}
           */
          modelType: "board";
          /** @description The name of the Custom Field */
          name: string;
          /**
           * @description The type of Custom Field to create. 
           * @enum {string}
           */
          type: "checkbox" | "list" | "number" | "text" | "date";
          /** @description If the type is `checkbox` */
          options?: string;
          pos: components["schemas"]["posStringOrNumber"];
          /**
           * @description Whether this Custom Field should be shown on the front of Cards 
           * @default true
           */
          display_cardFront?: boolean;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["CustomField"];
        };
      };
    };
  };
  /** Get a Custom Field */
  "get-customfields-id": {
    parameters: {
      path: {
        /** @description ID of the Custom Field. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["CustomField"];
        };
      };
    };
  };
  /**
   * Update a Custom Field definition 
   * @description Update a Custom Field definition.
   */
  "put-customfields-id": {
    parameters: {
      path: {
        /** @description ID of the Custom Field. */
        id: components["schemas"]["TrelloID"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description The name of the Custom Field */
          name?: string;
          pos?: components["schemas"]["posStringOrNumber"];
          /** @description Whether to display this custom field on the front of cards */
          "display/cardFront"?: boolean;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["CustomField"];
        };
      };
    };
  };
  /**
   * Delete a Custom Field definition 
   * @description Delete a Custom Field from a board.
   */
  "delete-customfields-id": {
    parameters: {
      path: {
        /** @description ID of the Custom Field. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Options of Custom Field drop down 
   * @description Get the options of a drop down Custom Field
   */
  "post-customfields-id-options": {
    parameters: {
      path: {
        /** @description ID of the customfield. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Add Option to Custom Field dropdown 
   * @description Add an option to a dropdown Custom Field
   */
  "get-customfields-id-options": {
    parameters: {
      path: {
        /** @description ID of the customfield. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Option of Custom Field dropdown 
   * @description Retrieve a specific, existing Option on a given dropdown-type Custom Field
   */
  "get-customfields-options-idcustomfieldoption": {
    parameters: {
      path: {
        /** @description ID of the customfielditem. */
        id: components["schemas"]["TrelloID"];
        /** @description ID of the customfieldoption to retrieve. */
        idCustomFieldOption: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Delete Option of Custom Field dropdown 
   * @description Delete an option from a Custom Field dropdown.
   */
  "delete-customfields-options-idcustomfieldoption": {
    parameters: {
      path: {
        /** @description ID of the customfielditem. */
        id: components["schemas"]["TrelloID"];
        /** @description ID of the customfieldoption to retrieve. */
        idCustomFieldOption: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * List available Emoji 
   * @description List available Emoji
   */
  emoji: {
    parameters: {
      query: {
        /** @description The locale to return emoji descriptions and names in. Defaults to the logged in member's locale. */
        locale?: string;
        /** @description `true` to return spritesheet URLs in the response */
        spritesheets?: boolean;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Emoji"];
        };
      };
    };
  };
  /**
   * Get an Enterprise 
   * @description Get an enterprise by its ID.
   */
  "get-enterprises-id": {
    parameters: {
      query: {
        /** @description Comma-separated list of: `id`, `name`, `displayName`, `prefs`, `ssoActivationFailed`, `idAdmins`, `idMembers` (Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data. Read the SCIM documentation [here]() for more information on filtering), `idOrganizations`, `products`, `userTypes`, `idMembers`, `idOrganizations` */
        fields?: string;
        /** @description One of: `none`, `normal`, `admins`, `owners`, `all` */
        members?: string;
        /** @description One of: `avatarHash`, `fullName`, `initials`, `username` */
        member_fields?: string;
        /** @description Pass a [SCIM-style query](/cloud/trello/scim/) to filter members. This takes precedence over the all/normal/admins value of members. If any of the member_* args are set, the member array will be paginated. */
        member_filter?: string;
        /** @description This parameter expects a [SCIM-style](/cloud/trello/scim/) sorting value prefixed by a `-` to sort descending. If no `-` is prefixed, it will be sorted ascending. Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data. */
        member_sort?: string;
        /** @description Deprecated: Please use member_sort. This parameter expects a [SCIM-style sorting value](/cloud/trello/scim/). Note that the members array returned will be paginated if `members` is `normal` or `admins`. Pagination can be controlled with `member_startIndex`, etc, and the API response's header will contain the total count and pagination state. */
        member_sortBy?: string;
        /** @description Deprecated: Please use member_sort. One of: `ascending`, `descending`, `asc`, `desc` */
        member_sortOrder?: string;
        /** @description Any integer between 0 and 100. */
        member_startIndex?: number;
        /** @description 0 to 100 */
        member_count?: number;
        /** @description One of: `none`, `members`, `public`, `all` */
        organizations?: string;
        /** @description Any valid value that the [nested organization field resource]() accepts. */
        organization_fields?: string;
        /** @description Whether or not to include paid account information in the returned workspace objects */
        organization_paid_accounts?: boolean;
        /** @description Comma-seperated list of: `me`, `normal`, `admin`, `active`, `deactivated` */
        organization_memberships?: string;
      };
      path: {
        /** @description ID of the enterprise to retrieve. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Enterprise"];
        };
      };
    };
  };
  /**
   * Get auditlog data for an Enterprise 
   * @description Returns an array of Actions related to the Enterprise object. Used for populating data sent to Google Sheets from an Enterprise's audit log page: https://trello.com/e/{enterprise_name}/admin/auditlog. An Enterprise admin token is required for this route. 
   * 
   *  NOTE: For enterprises that have opted in to user management via AdminHub, the auditlog will will contain actions taken in AdminHub, but may not contain the source for those actions.
   */
  "get-enterprises-id-auditlog": {
    parameters: {
      path: {
        /** @description ID of the enterprise to retrieve. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["EnterpriseAuditLog"])[];
        };
      };
    };
  };
  /**
   * Get Enterprise admin Members 
   * @description Get an enterprise's admin members.
   */
  "get-enterprises-id-admins": {
    parameters: {
      query: {
        /** @description Any valid value that the [nested member field resource]() accepts. */
        fields?: string;
      };
      path: {
        /** @description ID of the enterprise to retrieve. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["EnterpriseAdmin"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      /** @description Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Get signupUrl for Enterprise 
   * @description Get the signup URL for an enterprise.
   */
  "get-enterprises-id-signupurl": {
    parameters: {
      query: {
        authenticate?: boolean;
        confirmationAccepted?: boolean;
        /** @description Any valid URL. */
        returnUrl?: string | null;
        /** @description Designates whether the user has seen/consented to the Trello ToS prior to being redirected to the enterprise signup page/their IdP. */
        tosAccepted?: boolean;
      };
      path: {
        /** @description ID of the enterprise to retrieve. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            signupUrl?: string;
          };
        };
      };
    };
  };
  /**
   * Get Members of Enterprise 
   * @description Get the members of an enterprise.
   */
  "get-enterprises-id-members": {
    parameters: {
      query: {
        /** @description A comma-seperated list of valid [member fields](/cloud/trello/guides/rest-api/object-definitions/#member-object). */
        fields?: string;
        /** @description Pass a [SCIM-style query](/cloud/trello/scim/) to filter members. This takes precedence over the all/normal/admins value of members. If any of the below member_* args are set, the member array will be paginated. */
        filter?: string | null;
        /** @description This parameter expects a [SCIM-style](/cloud/trello/scim/) sorting value prefixed by a `-` to sort descending. If no `-` is prefixed, it will be sorted ascending. Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data. */
        sort?: string;
        /** @description Deprecated: Please use `sort` instead. This parameter expects a [SCIM-style](/cloud/trello/scim/) sorting value. Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data. */
        sortBy?: string;
        /** @description Deprecated: Please use `sort` instead. One of: `ascending`, `descending`, `asc`, `desc`. */
        sortOrder?: "ascending" | "descending" | "asc" | "desc" | "" | null;
        /** @description Any integer between 0 and 9999. */
        startIndex?: number;
        /** @description [SCIM-style filter](/cloud/trello/scim/). */
        count?: string;
        /** @description Any valid value that the [nested organization field resource](/cloud/trello/guides/rest-api/nested-resources/) accepts. */
        organization_fields?: string;
        /** @description Any valid value that the [nested board resource](/cloud/trello/guides/rest-api/nested-resources/) accepts. */
        board_fields?: string;
      };
      path: {
        /** @description ID of the Enterprise to retrieve. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Member"])[];
        };
      };
    };
  };
  /**
   * Get a Member of Enterprise 
   * @description Get a specific member of an enterprise by ID.
   */
  "get-enterprises-id-members-idmember": {
    parameters: {
      query: {
        /** @description A comma separated list of any valid values that the [nested member field resource]() accepts. */
        fields?: string;
        /** @description Any valid value that the [nested organization field resource](/cloud/trello/guides/rest-api/nested-resources/) accepts. */
        organization_fields?: string;
        /** @description Any valid value that the [nested board resource](/cloud/trello/guides/rest-api/nested-resources/) accepts. */
        board_fields?: string;
      };
      path: {
        /** @description ID of the enterprise to retrieve. */
        id: components["schemas"]["TrelloID"];
        /** @description An ID of a member resource. */
        idMember: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Member"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      /** @description Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Get whether an organization can be transferred to an enterprise. 
   * @description Get whether an organization can be transferred to an enterprise.
   */
  "get-enterprises-id-transferrable-organization-idOrganization": {
    parameters: {
      path: {
        /** @description ID of the Enterprise to retrieve. */
        id: components["schemas"]["TrelloID"];
        /** @description An ID of an Organization resource. */
        idOrganization: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["TransferrableOrganization"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      /** @description Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Get a bulk list of organizations that can be transferred to an enterprise. 
   * @description Get a list of organizations that can be transferred to an enterprise when given a bulk list of organizations.
   */
  "get-enterprises-id-transferrable-bulk-idOrganizations": {
    parameters: {
      path: {
        /** @description ID of the Enterprise to retrieve. */
        id: components["schemas"]["TrelloID"];
        /** @description An array of IDs of an Organization resource. */
        idOrganizations: (components["schemas"]["Organization"])[];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["TransferrableOrganization"])[];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      /** @description Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Decline enterpriseJoinRequests from one organization or a bulk list of organizations. 
   * @description Decline enterpriseJoinRequests from one organization or bulk amount of organizations
   */
  "put-enterprises-id-enterpriseJoinRequest-bulk": {
    parameters: {
      query: {
        /** @description An array of IDs of an Organization resource. */
        idOrganizations: (components["schemas"]["Organization"])[];
      };
      path: {
        /** @description ID of the Enterprise to retrieve. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      /** @description Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Get ClaimableOrganizations of an Enterprise 
   * @description Get the Workspaces that are claimable by the enterprise by ID. Can optionally query for workspaces based on activeness/ inactiveness.
   */
  "get-enterprises-id-claimableOrganizations": {
    parameters: {
      query: {
        /** @description Limits the number of workspaces to be sorted */
        limit?: number;
        /** @description Specifies the sort order to return matching documents */
        cursor?: string;
        /** @description Name of the enterprise to retrieve workspaces for */
        name?: string;
        /** @description Date in YYYY-MM-DD format indicating the date to search up to for activeness of workspace */
        activeSince?: string;
        /** @description Date in YYYY-MM-DD format indicating the date to search up to for inactiveness of workspace */
        inactiveSince?: string;
      };
      path: {
        /** @description ID of the enterprise to retrieve */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["ClaimableOrganizations"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      /** @description Unexpected erorr */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Get PendingOrganizations of an Enterprise 
   * @description Get the Workspaces that are pending for the enterprise by ID.
   */
  "get-enterprises-id-pendingOrganizations": {
    parameters: {
      query: {
        /** @description Date in YYYY-MM-DD format indicating the date to search up to for activeness of workspace */
        activeSince?: string;
        /** @description Date in YYYY-MM-DD format indicating the date to search up to for inactiveness of workspace */
        inactiveSince?: string;
      };
      path: {
        /** @description ID of the enterprise to retrieve */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["PendingOrganizations"])[];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      /** @description Unexpected erorr */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Create an auth Token for an Enterprise. 
   * @description Create an auth Token for an Enterprise.
   */
  "post-enterprises-id-tokens": {
    parameters: {
      query: {
        /** @description One of: `1hour`, `1day`, `30days`, `never` */
        expiration?: string;
      };
      path: {
        /** @description ID of the enterprise to retrieve. */
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Transfer an Organization to an Enterprise. 
   * @description Transfer an organization to an enterprise.
   * 
   *  NOTE: For enterprises that have opted in to user management via AdminHub, this endpoint will result in the organization being added to the enterprise asynchronously. A 200 response only indicates receipt of the request, it does not indicate successful addition to the enterprise.
   */
  "put-enterprises-id-organizations": {
    parameters: {
      query: {
        /** @description ID of Organization to be transferred to Enterprise. */
        idOrganization: string;
      };
      path: {
        /** @description ID of the Enterprise to retrieve. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Organization"])[];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      /** @description Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Update a Member's licensed status 
   * @description This endpoint is used to update whether the provided Member should use one of the Enterprise's available licenses or not. Revoking a license will deactivate a Member of an Enterprise. 
   * 
   *  NOTE: Revoking of licenses is not possible for enterprises that have opted in to user management via AdminHub.
   */
  "put-enterprises-id-members-idmember-licensed": {
    parameters: {
      query: {
        /** @description Boolean value to determine whether the user should be given an Enterprise license (true) or not (false). */
        value: boolean;
      };
      path: {
        /** @description ID of the Enterprise. */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the Member */
        idMember: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Member"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      /** @description Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Deactivate a Member of an Enterprise. 
   * @description Deactivate a Member of an Enterprise.
   * 
   *  NOTE: Deactivation is not possible for enterprises that have opted in to user management via AdminHub.
   */
  "enterprises-id-members-idMember-deactivated": {
    parameters: {
      query: {
        /** @description Determines whether the user is deactivated or not. */
        value: boolean;
        /** @description A comma separated list of any valid values that the [nested member field resource]() accepts. */
        fields?: (components["schemas"]["MemberFields"])[];
        /** @description Any valid value that the [nested organization resource](/cloud/trello/guides/rest-api/nested-resources/) accepts. */
        organization_fields?: components["schemas"]["OrganizationFields"];
        /** @description Any valid value that the [nested board resource](/cloud/trello/guides/rest-api/nested-resources/) accepts. */
        board_fields?: components["schemas"]["BoardFields"];
      };
      path: {
        /** @description ID of the enterprise to retrieve. */
        id: components["schemas"]["TrelloID"];
        /** @description ID of the Member to deactive. */
        idMember: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Update Member to be admin of Enterprise 
   * @description Make Member an admin of Enterprise.
   * 
   *  NOTE: This endpoint is not available to enterprises that have opted in to user management via AdminHub.
   */
  "put-enterprises-id-admins-idmember": {
    parameters: {
      path: {
        /** @description ID of the enterprise to retrieve. */
        id: components["schemas"]["TrelloID"];
        /** @description ID of member to be made an admin of enterprise. */
        idMember: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Remove a Member as admin from Enterprise. 
   * @description Remove a member as admin from an enterprise.
   * 
   *  NOTE: This endpoint is not available to enterprises that have opted in to user management via AdminHub.
   */
  "enterprises-id-organizations-idmember": {
    parameters: {
      path: {
        /** @description ID of the Enterprise to retrieve. */
        id: components["schemas"]["TrelloID"];
        /** @description ID of the member to be removed as an admin from enterprise. */
        idMember: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Delete an Organization from an Enterprise. 
   * @description Remove an organization from an enterprise.
   */
  "delete-enterprises-id-organizations-idorg": {
    parameters: {
      path: {
        /** @description ID of the enterprise to retrieve. */
        id: components["schemas"]["TrelloID"];
        /** @description ID of the organization to be removed from the enterprise. */
        idOrg: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Bulk accept a set of organizations to an Enterprise. 
   * @description Accept an array of organizations to an enterprise.
   * 
   *  NOTE: For enterprises that have opted in to user management via AdminHub, this endpoint will result in organizations being added to the enterprise asynchronously. A 200 response only indicates receipt of the request, it does not indicate successful addition to the enterprise.
   */
  "get-enterprises-id-organizations-bulk-idOrganizations": {
    parameters: {
      path: {
        /** @description ID of the enterprise to retrieve. */
        id: components["schemas"]["TrelloID"];
        /** @description An array of IDs of the organizations to be removed from the enterprise. */
        idOrganizations: (components["schemas"]["Organization"])[];
      };
    };
    responses: {
      /** @description Success */
      200: never;
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      /** @description Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Get a Label 
   * @description Get information about a single Label.
   */
  "get-labels-id": {
    parameters: {
      query: {
        /** @description all or a comma-separated list of [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: string;
      };
      path: {
        /** @description The ID of the Label */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Update a Label 
   * @description Update a label by ID.
   */
  "put-labels-id": {
    parameters: {
      query: {
        /** @description The new name for the label */
        name?: string;
        /** @description The new color for the label. See: [fields](/cloud/trello/guides/rest-api/object-definitions/) for color options */
        color?: components["schemas"]["Color"];
      };
      path: {
        /** @description The ID of the Label */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Delete a Label 
   * @description Delete a label by ID.
   */
  "delete-labels-id": {
    parameters: {
      path: {
        /** @description The ID of the Label */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Update a field on a label 
   * @description Update a field on a label.
   */
  "put-labels-id-field": {
    parameters: {
      query: {
        /** @description The new value for the field. */
        value: components["schemas"]["TrelloID"];
      };
      path: {
        /** @description The id of the label */
        id: string;
        /** @description The field on the Label to update. */
        field: "color" | "name";
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Create a Label 
   * @description Create a new Label on a Board.
   */
  "post-labels": {
    parameters: {
      query: {
        /** @description Name for the label */
        name: string;
        /** @description The color for the label. */
        color: components["schemas"]["Color"];
        /** @description The ID of the Board to create the Label on. */
        idBoard: string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get a List 
   * @description Get information about a List
   */
  "get-lists-id": {
    parameters: {
      query: {
        /** @description `all` or a comma separated list of List field names. */
        fields?: string;
      };
      path: {
        /** @description The ID of the list */
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Update a List 
   * @description Update the properties of a List
   */
  "put-lists-id": {
    parameters: {
      query: {
        /** @description New name for the list */
        name?: string;
        /** @description Whether the list should be closed (archived) */
        closed?: boolean;
        /** @description ID of a board the list should be moved to */
        idBoard?: components["schemas"]["TrelloID"];
        /** @description New position for the list: `top`, `bottom`, or a positive floating point number */
        pos?: number | ("top" | "bottom");
        /** @description Whether the active member is subscribed to this list */
        subscribed?: boolean;
      };
      path: {
        /** @description The ID of the list */
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Create a new List 
   * @description Create a new List on a Board
   */
  "post-lists": {
    parameters: {
      query: {
        /** @description Name for the list */
        name: string;
        /** @description The long ID of the board the list should be created on */
        idBoard: components["schemas"]["TrelloID"];
        /** @description ID of the List to copy into the new List */
        idListSource?: components["schemas"]["TrelloID"];
        /** @description Position of the list. `top`, `bottom`, or a positive floating point number */
        pos?: number | ("top" | "bottom");
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Archive all Cards in List 
   * @description Archive all cards in a list
   */
  "post-lists-id-archiveallcards": {
    parameters: {
      path: {
        /** @description The ID of the list */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Move all Cards in List 
   * @description Move all Cards in a List
   */
  "post-lists-id-moveallcards": {
    parameters: {
      query: {
        /** @description The ID of the board the cards should be moved to */
        idBoard: components["schemas"]["TrelloID"];
        /** @description The ID of the list that the cards should be moved to */
        idList: components["schemas"]["TrelloID"];
      };
      path: {
        /** @description The ID of the list */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Archive or unarchive a list 
   * @description Archive or unarchive a list
   */
  "put-lists-id-closed": {
    parameters: {
      query: {
        /** @description Set to true to close (archive) the list */
        value?: components["schemas"]["TrelloID"];
      };
      path: {
        /** @description The ID of the list */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Move List to Board 
   * @description Move a List to a different Board
   */
  "put-id-idboard": {
    parameters: {
      query: {
        /** @description The ID of the board to move the list to */
        value: components["schemas"]["TrelloID"];
      };
      path: {
        /** @description The ID of the list */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Update a field on a List 
   * @description Rename a list
   */
  "put-lists-id-field": {
    parameters: {
      query: {
        /** @description The new value for the field */
        value?: string | number | ("top" | "bottom") | boolean;
      };
      path: {
        /** @description The ID of the list */
        id: components["schemas"]["TrelloID"];
        /** @description The field on the List to be updated */
        field: "name" | "pos" | "subscribed";
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Actions for a List 
   * @description Get the Actions on a List
   */
  "get-lists-id-actions": {
    parameters: {
      query: {
        /** @description A comma-separated list of [action types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/). */
        filter?: string;
      };
      path: {
        /** @description The ID of the list */
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get the Board a List is on 
   * @description Get the board a list is on
   */
  "get-lists-id-board": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/#board-object) */
        fields?: "all" | (components["schemas"]["BoardFields"])[];
      };
      path: {
        /** @description The ID of the list */
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Cards in a List 
   * @description List the cards in a list
   */
  "get-lists-id-cards": {
    parameters: {
      path: {
        /** @description The ID of the list */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Card"])[];
        };
      };
    };
  };
  /**
   * Get a Member 
   * @description Get a member
   */
  "get-members=id": {
    parameters: {
      query: {
        /** @description See the [Actions Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#actions-nested-resource) */
        actions?: string;
        /** @description See the [Boards Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#boards-nested-resource) */
        boards?: string;
        /** @description One of: `all`, `custom`, `default`, `none`, `premium` */
        boardBackgrounds?: "all" | "custom" | "default" | "none" | "premium";
        /** @description `all` or a comma-separated list of: closed, members, open, organization, pinned, public, starred, unpinned */
        boardsInvited?: "all" | (("closed" | "members" | "open" | "organization" | "pinned" | "public" | "starred" | "unpinned")[]);
        /** @description `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        boardsInvited_fields?: "all" | (components["schemas"]["BoardFields"])[];
        /** @description Whether to return the boardStars or not */
        boardStars?: boolean;
        /** @description See the [Cards Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#cards-nested-resource) for additional options */
        cards?: string;
        /** @description `all` or `none` */
        customBoardBackgrounds?: "all" | "none";
        /** @description `all` or `none` */
        customEmoji?: "all" | "none";
        /** @description `all` or `none` */
        customStickers?: "all" | "none";
        /** @description `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["MemberFields"])[];
        /** @description See the [Notifications Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#notifications-nested-resource) */
        notifications?: string;
        /** @description One of: `all`, `members`, `none`, `public` */
        organizations?: "all" | "members" | "none" | "public";
        /** @description `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        organization_fields?: "all" | (components["schemas"]["OrganizationFields"])[];
        /** @description Whether or not to include paid account information in the returned workspace object */
        organization_paid_account?: boolean;
        /** @description One of: `all`, `members`, `none`, `public` */
        organizationsInvited?: "all" | "members" | "none" | "public";
        /** @description `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        organizationsInvited_fields?: "all" | (components["schemas"]["OrganizationFields"])[];
        /**
         * @deprecated 
         * @description Whether or not to include paid account information in the returned member object
         */
        paid_account?: boolean;
        savedSearches?: boolean;
        /** @description `all` or `none` */
        tokens?: "all" | "none";
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"] | string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Member"];
        };
      };
    };
  };
  /**
   * Update a Member 
   * @description Update a Member
   */
  "put-members-id": {
    parameters: {
      query: {
        /** @description New name for the member. Cannot begin or end with a space. */
        fullName?: string;
        /** @description New initials for the member. 1-4 characters long. */
        initials?: string;
        /** @description New username for the member. At least 3 characters long, only lowercase letters, underscores, and numbers. Must be unique. */
        username?: string;
        bio?: string;
        /** @description One of: `gravatar`, `none`, `upload` */
        avatarSource?: "gravatar" | "none" | "upload";
        "prefs/colorBlind"?: boolean;
        "prefs/locale"?: string;
        /** @description `-1` for disabled, `1`, or `60` */
        "prefs/minutesBetweenSummaries"?: number;
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Member"];
        };
      };
    };
  };
  /**
   * Get a field on a Member 
   * @description Get a particular property of a member
   */
  "get-members-id-field": {
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
        /** @description One of the member [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        field: components["schemas"]["MemberFields"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Member"];
        };
      };
    };
  };
  /**
   * Get a Member's Actions 
   * @description List the actions for a member
   */
  "get-members-id-actions": {
    parameters: {
      query: {
        /** @description A comma-separated list of [action types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/). */
        filter?: string;
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Member"])[];
        };
      };
    };
  };
  /**
   * Get Member's custom Board backgrounds 
   * @description Get a member's custom board backgrounds
   */
  "get-members-id-boardbackgrounds": {
    parameters: {
      query: {
        /** @description One of: `all`, `custom`, `default`, `none`, `premium` */
        filter?: "all" | "custom" | "default" | "none" | "premium";
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["BoardBackground"])[];
        };
      };
    };
  };
  /**
   * Upload new boardBackground for Member 
   * @description Upload a new boardBackground
   */
  "post-members-id-boardbackgrounds-1": {
    parameters: {
      query: {
        file: string;
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["BoardBackground"])[];
        };
      };
    };
  };
  /**
   * Get a boardBackground of a Member 
   * @description Get a member's board background
   */
  "get-members-id-boardbackgrounds-idbackground": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of: `brightness`, `fullSizeUrl`, `scaled`, `tile` */
        fields?: "all" | (("all" | "brightness" | "fullSizeUrl" | "scaled" | "tile")[]);
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the board background */
        idBackground: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["BoardBackground"];
        };
      };
    };
  };
  /**
   * Update a Member's custom Board background 
   * @description Update a board background
   */
  "put-members-id-boardbackgrounds-idbackground": {
    parameters: {
      query: {
        /** @description One of: `dark`, `light`, `unknown` */
        brightness?: "dark" | "light" | "unknown";
        /** @description Whether the background should be tiled */
        tile?: boolean;
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the board background */
        idBackground: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["BoardBackground"];
        };
      };
    };
  };
  /**
   * Delete a Member's custom Board background 
   * @description Delete a board background
   */
  "delete-members-id-boardbackgrounds-idbackground": {
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the board background */
        idBackground: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get a Member's boardStars 
   * @description List a member's board stars
   */
  "get-members-id-boardstars": {
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Create Star for Board 
   * @description Star a new board on behalf of a Member
   */
  "post-members-id-boardstars": {
    parameters: {
      query: {
        /** @description The ID of the board to star */
        idBoard: components["schemas"]["TrelloID"];
        /** @description The position of the newly starred board. `top`, `bottom`, or a positive float. */
        pos: components["schemas"]["posStringOrNumber"];
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"] | string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["BoardStars"])[];
        };
      };
    };
  };
  /**
   * Get a boardStar of Member 
   * @description Get a specific boardStar
   */
  "get-members-id-boardstars-idstar": {
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the board star */
        idStar: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["BoardStars"];
        };
      };
    };
  };
  /**
   * Update the position of a boardStar of Member 
   * @description Update the position of a starred board
   */
  "put-members-id-boardstars-idstar": {
    parameters: {
      query: {
        /** @description New position for the starred board. `top`, `bottom`, or a positive float. */
        pos?: components["schemas"]["posStringOrNumber"];
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the board star */
        idStar: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Delete Star for Board 
   * @description Unstar a board
   */
  "delete-members-id-boardstars-idstar": {
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the board star */
        idStar: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Boards that Member belongs to 
   * @description Lists the boards that the user is a member of.
   */
  "get-members-id-boards": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of: `closed`, `members`, `open`, `organization`, `public`, `starred` */
        filter?: "all" | (("all" | "closed" | "members" | "open" | "organization" | "public" | "starred")[]);
        /** @description `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["BoardFields"])[];
        /** @description Which lists to include with the boards. One of: `all`, `closed`, `none`, `open` */
        lists?: "all" | "closed" | "none" | "open";
        /** @description Whether to include the Organization object with the Boards */
        organization?: boolean;
        /** @description `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        organization_fields?: "all" | (components["schemas"]["OrganizationFields"])[];
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Board"])[];
        };
      };
    };
  };
  /**
   * Get Boards the Member has been invited to 
   * @description Get the boards the member has been invited to
   */
  "get-members-id-boardsinvited": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["BoardFields"])[];
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Board"])[];
        };
      };
    };
  };
  /**
   * Get Cards the Member is on 
   * @description Gets the cards a member is on
   */
  "get-members-id-cards": {
    parameters: {
      query: {
        /** @description One of: `all`, `closed`, `none`, `open`, `visible` */
        filter?: "all" | "closed" | "none" | "open" | "visible";
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Card"])[];
        };
      };
    };
  };
  /**
   * Get a Member's custom Board Backgrounds 
   * @description Get a member's custom board backgrounds
   */
  "get-members-id-customboardbackgrounds": {
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["BoardBackground"])[];
        };
      };
    };
  };
  /**
   * Create a new custom Board Background 
   * @description Upload a new custom board background
   */
  "membersidcustomboardbackgrounds-1": {
    parameters: {
      query: {
        file: string;
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["BoardBackground"];
        };
      };
    };
  };
  /**
   * Get custom Board Background of Member 
   * @description Get a specific custom board background
   */
  "get-members-id-customboardbackgrounds-idbackground": {
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"] | string;
        /** @description The ID of the custom background */
        idBackground: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["BoardBackground"];
        };
      };
    };
  };
  /**
   * Update custom Board Background of Member 
   * @description Update a specific custom board background
   */
  "put-members-id-customboardbackgrounds-idbackground": {
    parameters: {
      query: {
        /** @description One of: `dark`, `light`, `unknown` */
        brightness?: "dark" | "light" | "unknown";
        /** @description Whether to tile the background */
        tile?: boolean;
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"] | string;
        /** @description The ID of the custom background */
        idBackground: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["BoardBackground"];
        };
      };
    };
  };
  /**
   * Delete custom Board Background of Member 
   * @description Delete a specific custom board background
   */
  "delete-members-id-customboardbackgrounds-idbackground": {
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"] | string;
        /** @description The ID of the custom background */
        idBackground: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get a Member's customEmojis 
   * @description Get a Member's uploaded custom Emojis
   */
  "get-members-id-customemoji": {
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["CustomEmoji"])[];
        };
      };
    };
  };
  /**
   * Create custom Emoji for Member 
   * @description Create a new custom Emoji
   */
  "post-members-id-customemoji": {
    parameters: {
      query: {
        file: string;
        /** @description Name for the emoji. 2 - 64 characters */
        name: string;
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["CustomEmoji"];
        };
      };
    };
  };
  /**
   * Get a Member's custom Emoji 
   * @description Get a Member's custom Emoji
   */
  membersidcustomemojiidemoji: {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of `name`, `url` */
        fields?: "all" | (("name" | "url")[]);
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the custom emoji */
        idEmoji: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["CustomEmoji"];
        };
      };
    };
  };
  /**
   * Get Member's custom Stickers 
   * @description Get a Member's uploaded stickers
   */
  "get-members-id-customstickers": {
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["CustomSticker"])[];
        };
      };
    };
  };
  /**
   * Create custom Sticker for Member 
   * @description Upload a new custom sticker
   */
  "post-members-id-customstickers": {
    parameters: {
      query: {
        file: string;
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["CustomSticker"];
        };
      };
    };
  };
  /**
   * Get a Member's custom Sticker 
   * @description Get a Member's custom Sticker
   */
  "get-members-id-customstickers-idsticker": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of `scaled`, `url` */
        fields?: "all" | (("scaled" | "url")[]);
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the uploaded sticker */
        idSticker: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["CustomSticker"];
        };
      };
    };
  };
  /**
   * Delete a Member's custom Sticker 
   * @description Delete a Member's custom Sticker
   */
  "delete-members-id-customstickers-idsticker": {
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the uploaded sticker */
        idSticker: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Member's Notifications 
   * @description Get a member's notifications
   */
  "get-members-id-notifications": {
    parameters: {
      query: {
        entities?: boolean;
        display?: boolean;
        filter?: string;
        /** @description One of: `all`, `read`, `unread` */
        read_filter?: string;
        /** @description `all` or a comma-separated list of notification [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["NotificationFields"])[];
        /** @description Max 1000 */
        limit?: number;
        /** @description Max 100 */
        page?: number;
        /** @description A notification ID */
        before?: string;
        /** @description A notification ID */
        since?: string;
        memberCreator?: boolean;
        /** @description `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        memberCreator_fields?: "all" | (components["schemas"]["MemberFields"])[];
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Notification"])[];
        };
      };
    };
  };
  /**
   * Get Member's Organizations 
   * @description Get a member's Workspaces
   */
  "get-members-id-organizations": {
    parameters: {
      query: {
        /** @description One of: `all`, `members`, `none`, `public` (Note: `members` filters to only private Workspaces) */
        filter?: "all" | "members" | "none" | "public";
        /** @description `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["OrganizationFields"])[];
        /** @description Whether or not to include paid account information in the returned workspace object */
        paid_account?: boolean;
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Organization"])[];
        };
      };
    };
  };
  /**
   * Get Organizations a Member has been invited to 
   * @description Get a member's Workspaces they have been invited to
   */
  "get-members-id-organizationsinvited": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["OrganizationFields"])[];
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Organization"])[];
        };
      };
    };
  };
  /**
   * Get Member's saved searched 
   * @description List the saved searches of a Member
   */
  "get-members-id-savedsearches": {
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["SavedSearch"])[];
        };
      };
    };
  };
  /**
   * Create saved Search for Member 
   * @description Create a saved search
   */
  "post-members-id-savedsearches": {
    parameters: {
      query: {
        /** @description The name for the saved search */
        name: string;
        /** @description The search query */
        query: string;
        /** @description The position of the saved search. `top`, `bottom`, or a positive float. */
        pos: components["schemas"]["posStringOrNumber"];
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["SavedSearch"];
        };
      };
    };
  };
  /**
   * Get a saved search 
   * @description Get a saved search
   */
  "get-members-id-savedsearches-idsearch": {
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: string;
        /** @description The ID of the saved search to delete */
        idSearch: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["SavedSearch"];
        };
      };
    };
  };
  /**
   * Update a saved search 
   * @description Update a saved search
   */
  "put-members-id-savedsearches-idsearch": {
    parameters: {
      query: {
        /** @description The new name for the saved search */
        name?: string;
        /** @description The new search query */
        query?: string;
        /** @description New position for saves search. `top`, `bottom`, or a positive float. */
        pos?: string;
      };
      path: {
        /** @description The ID or username of the member */
        id: string;
        /** @description The ID of the saved search to delete */
        idSearch: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["SavedSearch"];
        };
      };
    };
  };
  /**
   * Delete a saved search 
   * @description Delete a saved search
   */
  "delete-members-id-savedsearches-idsearch": {
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: string;
        /** @description The ID of the saved search to delete */
        idSearch: string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Member's Tokens 
   * @description List a members app tokens
   */
  "get-members-id-tokens": {
    parameters: {
      query: {
        /** @description Whether to include webhooks */
        webhooks?: boolean;
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Token"])[];
        };
      };
    };
  };
  /**
   * Create Avatar for Member 
   * @description Create a new avatar for a member
   */
  membersidavatar: {
    parameters: {
      query: {
        file: string;
      };
      path: {
        /** @description The ID or username of the member */
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Dismiss a message for Member 
   * @description Dismiss a message
   */
  "post-members-id-onetimemessagesdismissed": {
    parameters: {
      query: {
        /** @description The message to dismiss */
        value: components["schemas"]["TrelloID"];
      };
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get a Member's notification channel settings 
   * @description Get a member's notification channel settings
   */
  "get-members-id-notificationChannelSettings": {
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"] | string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["NotificationChannelSettings"])[];
        };
      };
    };
  };
  /**
   * Update blocked notification keys of Member on a channel 
   * @description Update blocked notification keys of Member on a specific channel
   */
  "put-members-id-notificationChannelSettings-channel-blockedKeys": {
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"] | string;
        /** @description Channel to block notifications on */
        channel: components["schemas"]["Channel"];
        /** @description Singular key or comma-separated list of notification keys */
        blockedKeys: components["schemas"]["BlockedKey"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["NotificationChannelSettings"];
        };
      };
    };
  };
  /**
   * Get blocked notification keys of Member on this channel 
   * @description Get blocked notification keys of Member on a specific channel
   */
  "get-members-id-notificationChannelSettings-channel": {
    parameters: {
      path: {
        /** @description The ID or username of the member */
        id: components["schemas"]["TrelloID"] | string;
        /** @description Channel to block notifications on */
        channel: components["schemas"]["Channel"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["NotificationChannelSettings"];
        };
      };
    };
  };
  /** Get a Notification */
  "get-notifications-id": {
    parameters: {
      query: {
        /** @description Whether to include the board object */
        board?: boolean;
        /** @description `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        board_fields?: "all" | (components["schemas"]["BoardFields"])[];
        /** @description Whether to include the card object */
        card?: boolean;
        /** @description `all` or a comma-separated list of card [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        card_fields?: "all" | (components["schemas"]["CardFields"])[];
        /** @description Whether to include the display object with the results */
        display?: boolean;
        /** @description Whether to include the entities object with the results */
        entities?: boolean;
        /** @description `all` or a comma-separated list of notification [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["NotificationFields"])[];
        /** @description Whether to include the list object */
        list?: boolean;
        /** @description Whether to include the member object */
        member?: boolean;
        /** @description `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        member_fields?: "all" | (components["schemas"]["MemberFields"])[];
        /** @description Whether to include the member object of the creator */
        memberCreator?: boolean;
        /** @description `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        memberCreator_fields?: "all" | (components["schemas"]["MemberFields"])[];
        /** @description Whether to include the organization object */
        organization?: boolean;
        /** @description `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        organization_fields?: "all" | (components["schemas"]["OrganizationFields"])[];
      };
      path: {
        /** @description The ID of the notification */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Notification"];
        };
      };
    };
  };
  /**
   * Update a Notification's read status 
   * @description Update the read status of a notification
   */
  "put-notifications-id": {
    parameters: {
      query: {
        /** @description Whether the notification should be marked as read or not */
        unread?: boolean;
      };
      path: {
        /** @description The ID of the notification */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Notification"];
        };
      };
    };
  };
  /**
   * Get a field of a Notification 
   * @description Get a specific property of a notification
   */
  "get-notifications-id-field": {
    parameters: {
      path: {
        /** @description The ID of the notification */
        id: components["schemas"]["TrelloID"];
        /** @description A notification [field](/cloud/trello/guides/rest-api/object-definitions/) */
        field: components["schemas"]["NotificationFields"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Notification"];
        };
      };
    };
  };
  /**
   * Mark all Notifications as read 
   * @description Mark all notifications as read
   */
  "post-notifications-all-read": {
    parameters: {
      query: {
        /** @description Boolean to specify whether to mark as read or unread (defaults to `true`, marking as read) */
        read?: boolean;
        /** @description A comma-seperated list of IDs. Allows specifying an array of notification IDs to change the read state for. This will become useful as we add grouping of notifications to the UI, with a single button to mark all notifications in the group as read/unread. */
        ids?: (components["schemas"]["TrelloID"])[];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Notification"];
        };
      };
    };
  };
  /**
   * Update Notification's read status 
   * @description Update Notification's read status
   */
  "put-notifications-id-unread": {
    parameters: {
      query: {
        value?: string;
      };
      path: {
        /** @description The ID of the notification */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Notification"];
        };
      };
    };
  };
  /**
   * Get the Board a Notification is on 
   * @description Get the board a notification is associated with
   */
  "get-notifications-id-board": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of board[fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["BoardFields"])[];
      };
      path: {
        /** @description The ID of the notification */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Board"];
        };
      };
    };
  };
  /**
   * Get the Card a Notification is on 
   * @description Get the card a notification is associated with
   */
  "get-notifications-id-card": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of card [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["CardFields"])[];
      };
      path: {
        /** @description The ID of the notification */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Card"];
        };
      };
    };
  };
  /**
   * Get the List a Notification is on 
   * @description Get the list a notification is associated with
   */
  "get-notifications-id-list": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of list [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["ListFields"])[];
      };
      path: {
        /** @description The ID of the notification */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["TrelloList"];
        };
      };
    };
  };
  /**
   * Get the Member a Notification is about (not the creator) 
   * @description Get the member (not the creator) a notification is about
   */
  notificationsidmember: {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["MemberFields"])[];
      };
      path: {
        /** @description The ID of the notification */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Member"];
        };
      };
    };
  };
  /**
   * Get the Member who created the Notification 
   * @description Get the member who created the notification
   */
  "get-notifications-id-membercreator": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["MemberFields"])[];
      };
      path: {
        /** @description The ID of the notification */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Member"];
        };
      };
    };
  };
  /**
   * Get a Notification's associated Organization 
   * @description Get the organization a notification is associated with
   */
  "get-notifications-id-organization": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["OrganizationFields"])[];
      };
      path: {
        /** @description The ID of the notification */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
    };
  };
  /**
   * Create a new Organization 
   * @description Create a new Workspace
   */
  "post-organizations": {
    parameters: {
      query: {
        /** @description The name to display for the Organization */
        displayName: string;
        /** @description The description for the organizations */
        desc?: string;
        /** @description A string with a length of at least 3. Only lowercase letters, underscores, and numbers are allowed. If the name contains invalid characters, they will be removed. If the name conflicts with an existing name, a new name will be substituted. */
        name?: string;
        /** @description A URL starting with `http://` or `https://` */
        website?: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
    };
  };
  /** Get an Organization */
  "get-organizations-id": {
    parameters: {
      path: {
        /** @description The ID or name of the Organization */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
    };
  };
  /**
   * Update an Organization 
   * @description Update an organization
   */
  "put-organizations-id": {
    parameters: {
      query: {
        /** @description A new name for the organization. At least 3 lowercase letters, underscores, and numbers. Must be unique */
        name?: string;
        /** @description A new displayName for the organization. Must be at least 1 character long and not begin or end with a space. */
        displayName?: string;
        /** @description A new description for the organization */
        desc?: string;
        /** @description A URL starting with `http://`, `https://`, or `null` */
        website?: string;
        /** @description The Google Apps domain to link this org to. */
        "prefs/associatedDomain"?: string;
        /** @description Whether non-workspace members can be added to boards inside the Workspace */
        "prefs/externalMembersDisabled"?: boolean;
        /** @description `1` or `2` */
        "prefs/googleAppsVersion"?: number;
        /** @description Who on the Workspace can make Workspace visible boards. One of `admin`, `none`, `org` */
        "prefs/boardVisibilityRestrict/org"?: string;
        /** @description Who can make private boards. One of: `admin`, `none`, `org` */
        "prefs/boardVisibilityRestrict/private"?: string;
        /** @description Who on the Workspace can make public boards. One of: `admin`, `none`, `org` */
        "prefs/boardVisibilityRestrict/public"?: string;
        /** @description An email address with optional wildcard characters. (E.g. `subdomain.*.trello.com`) */
        "prefs/orgInviteRestrict"?: string;
        /** @description Whether the Workspace page is publicly visible. One of: `private`, `public` */
        "prefs/permissionLevel"?: string;
      };
      path: {
        /** @description The ID or name of the Organization */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
    };
  };
  /**
   * Delete an Organization 
   * @description Delete an Organization
   */
  "delete-organizations-id": {
    parameters: {
      path: {
        /** @description The ID or name of the Organization */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /** Get field on Organization */
  "get-organizations-id-field": {
    parameters: {
      path: {
        /** @description The ID or name of the organization */
        id: components["schemas"]["TrelloID"];
        /** @description An organization [field](/cloud/trello/guides/rest-api/object-definitions/) */
        field: components["schemas"]["OrganizationFields"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
    };
  };
  /**
   * Get Actions for Organization 
   * @description List the actions on a Workspace
   */
  "get-organizations-id-actions": {
    parameters: {
      path: {
        /** @description The ID or name of the organization */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Action"])[];
        };
      };
    };
  };
  /**
   * Get Boards in an Organization 
   * @description List the boards in a Workspace
   */
  "get-organizations-id-boards": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of: `open`, `closed`, `members`, `organization`, `public` */
        filter?: "all" | (("open" | "closed" | "members" | "organization" | "public")[]);
        /** @description `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/) */
        fields?: "all" | (components["schemas"]["BoardFields"])[];
      };
      path: {
        /** @description The ID or name of the organization */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Board"])[];
        };
      };
    };
  };
  /**
   * Retrieve Organization's Exports 
   * @description Retrieve the exports that exist for the given organization
   */
  "get-organizations-id-exports": {
    parameters: {
      path: {
        /** @description The ID or name of the Workspace */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Export"])[];
        };
      };
    };
  };
  /**
   * Create Export for Organizations 
   * @description Kick off CSV export for an organization
   */
  "post-organizations-id-exports": {
    parameters: {
      query: {
        /** @description Whether the CSV should include attachments or not. */
        attachments?: boolean;
      };
      path: {
        /** @description The ID or name of the Workspace */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Export"];
        };
      };
    };
  };
  /**
   * Get the Members of an Organization 
   * @description List the members in a Workspace
   */
  "get-organizations-id-members": {
    parameters: {
      path: {
        /** @description The ID or name of the Organization */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Member"])[];
        };
      };
    };
  };
  /** Update an Organization's Members */
  "put-organizations-id-members": {
    parameters: {
      query: {
        /** @description An email address */
        email: string;
        /** @description Name for the member, at least 1 character not beginning or ending with a space */
        fullName: string;
        /** @description One of: `admin`, `normal` */
        type?: "admin" | "normal";
      };
      path: {
        /** @description The ID or name of the organization */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Memberships of an Organization 
   * @description List the memberships of a Workspace
   */
  "get-organizations-id-memberships": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of: `active`, `admin`, `deactivated`, `me`, `normal` */
        filter?: "all" | (("active" | "admin" | "deactivated" | "me" | "normal")[]);
        /** @description Whether to include the Member objects with the Memberships */
        member?: boolean;
      };
      path: {
        /** @description The ID or name of the organization */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Memberships"])[];
        };
      };
    };
  };
  /**
   * Get a Membership of an Organization 
   * @description Get a single Membership for an Organization
   */
  "get-organizations-id-memberships-idmembership": {
    parameters: {
      query: {
        /** @description Whether to include the Member object in the response */
        member?: boolean;
      };
      path: {
        /** @description The ID or name of the organization */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the membership to load */
        idMembership: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Memberships"];
        };
      };
    };
  };
  /**
   * Get the pluginData Scoped to Organization 
   * @description Get organization scoped pluginData on this Workspace
   */
  "get-organizations-id-plugindata": {
    parameters: {
      path: {
        /** @description The ID or name of the organization */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["PluginData"])[];
        };
      };
    };
  };
  /**
   * Get Tags of an Organization 
   * @description List the organization's collections
   */
  "get-organizations-id-tags": {
    parameters: {
      path: {
        /** @description The ID or name of the Organization */
        id: string | components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Tag"])[];
        };
      };
    };
  };
  /**
   * Create a Tag in Organization 
   * @description Create a Tag in an Organization
   */
  "post-organizations-id-tags": {
    parameters: {
      path: {
        /** @description The ID or name of the Organization */
        id: string | components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Tag"];
        };
      };
    };
  };
  /**
   * Update a Member of an Organization 
   * @description Add a member to a Workspace or update their member type.
   */
  "put-organizations-id-members-idmember": {
    parameters: {
      query: {
        /** @description One of: `admin`, `normal` */
        type: "admin" | "normal";
      };
      path: {
        /** @description The ID or name of the organization */
        id: components["schemas"]["TrelloID"];
        /** @description The ID or username of the member to update */
        idMember: string | components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Member"];
        };
      };
    };
  };
  /**
   * Remove a Member from an Organization 
   * @description Remove a member from a Workspace
   */
  "delete-organizations-id-members": {
    parameters: {
      path: {
        /** @description The ID or name of the organization */
        id: components["schemas"]["TrelloID"] | string;
        /** @description The ID of the Member to remove from the Workspace */
        idMember: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Deactivate or reactivate a member of an Organization 
   * @description Deactivate or reactivate a member of a Workspace
   */
  "put-organizations-id-members-idmember-deactivated": {
    parameters: {
      query: {
        value: boolean;
      };
      path: {
        /** @description The ID or name of the organization */
        id: components["schemas"]["TrelloID"];
        /** @description The ID or username of the member to update */
        idMember: components["schemas"]["TrelloID"] | string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Update logo for an Organization 
   * @description Set the logo image for a Workspace
   */
  "post-organizations-id-logo": {
    parameters: {
      query: {
        /** @description Image file for the logo */
        file?: string;
      };
      path: {
        /** @description The ID or name of the Workspace */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
    };
  };
  /**
   * Delete Logo for Organization 
   * @description Delete a the logo from a Workspace
   */
  "delete-organizations-id-logo": {
    parameters: {
      path: {
        /** @description The ID or name of the organization */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Remove a Member from an Organization and all Organization Boards 
   * @description Remove a member from a Workspace and from all Workspace boards
   */
  "organizations-id-members-idmember-all": {
    parameters: {
      path: {
        /** @description The ID or name of the organization */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the member to remove from the Workspace */
        idMember: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Remove the associated Google Apps domain from a Workspace 
   * @description Remove the associated Google Apps domain from a Workspace
   */
  "delete-organizations-id-prefs-associateddomain": {
    parameters: {
      path: {
        /** @description The ID or name of the organization */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Delete the email domain restriction on who can be invited to the Workspace 
   * @description Remove the email domain restriction on who can be invited to the Workspace
   */
  "delete-organizations-id-prefs-orginviterestrict": {
    parameters: {
      path: {
        /** @description The ID or name of the organization */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Delete an Organization's Tag 
   * @description Delete an organization's tag
   */
  "delete-organizations-id-tags-idtag": {
    parameters: {
      path: {
        /** @description The ID or name of the organization */
        id: string;
        /** @description The ID of the tag to delete */
        idTag: string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get Organizations new billable guests 
   * @description Used to check whether the given board has new billable guests on it.
   */
  "get-organizations-id-newbillableguests-idboard": {
    parameters: {
      path: {
        /** @description The ID or name of the organization */
        id: components["schemas"]["TrelloID"];
        /** @description The ID of the board to check for new billable guests. */
        idBoard: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get a Plugin 
   * @description Get plugins
   */
  "get-plugins-id": {
    parameters: {
      path: {
        /** @description The ID or name of the organization */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  /**
   * Update a Plugin 
   * @description Update a Plugin
   */
  "put-plugins-id": {
    parameters: {
      path: {
        /** @description The ID or name of the organization */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  /**
   * Create a Listing for Plugin 
   * @description Create a new listing for a given locale for your Power-Up
   */
  "post-plugins-idplugin-listing": {
    parameters: {
      path: {
        /** @description The ID of the Power-Up for which you are creating a new listing. */
        idPlugin: components["schemas"]["TrelloID"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description The description to show for the given locale */
          description?: string;
          /** @description The locale that this listing should be displayed for. */
          locale?: string;
          /** @description The overview to show for the given locale. */
          overview?: string;
          /** @description The name to use for the given locale. */
          name?: string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["PluginListing"];
        };
      };
    };
  };
  /** Get Plugin's Member privacy compliance */
  "get-plugins-id-compliance-memberprivacy": {
    parameters: {
      path: {
        /** @description The ID of the Power-Up */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Updating Plugin's Listing 
   * @description Update an existing listing for your Power-Up
   */
  "put-plugins-idplugin-listings-idlisting": {
    parameters: {
      path: {
        /** @description The ID of the Power-Up whose listing is being updated. */
        idPlugin: components["schemas"]["TrelloID"];
        /** @description The ID of the existing listing for the Power-Up that is being updated. */
        idListing: components["schemas"]["TrelloID"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description The description to show for the given locale */
          description?: string;
          /** @description The locale that this listing should be displayed for. */
          locale?: string;
          /** @description The overview to show for the given locale. */
          overview?: string;
          /** @description The name to use for the given locale. */
          name?: string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["PluginListing"];
        };
      };
    };
  };
  /**
   * Search Trello 
   * @description Find what you're looking for in Trello
   */
  "get-search": {
    parameters: {
      query: {
        /** @description The search query with a length of 1 to 16384 characters */
        query: string;
        /** @description `mine` or a comma-separated list of Board IDs */
        idBoards?: "mine" | components["schemas"]["TrelloID"];
        /** @description A comma-separated list of Organization IDs */
        idOrganizations?: string;
        /** @description A comma-separated list of Card IDs */
        idCards?: string;
        /** @description What type or types of Trello objects you want to search. all or a comma-separated list of: `actions`, `boards`, `cards`, `members`, `organizations` */
        modelTypes?: string;
        /** @description all or a comma-separated list of: `closed`, `dateLastActivity`, `dateLastView`, `desc`, `descData`, `idOrganization`, `invitations`, `invited`, `labelNames`, `memberships`, `name`, `pinned`, `powerUps`, `prefs`, `shortLink`, `shortUrl`, `starred`, `subscribed`, `url` */
        board_fields?: string;
        /** @description The maximum number of boards returned. Maximum: 1000 */
        boards_limit?: number;
        /** @description Whether to include the parent organization with board results */
        board_organization?: boolean;
        /** @description all or a comma-separated list of: `badges`, `checkItemStates`, `closed`, `dateLastActivity`, `desc`, `descData`, `due`, `email`, `idAttachmentCover`, `idBoard`, `idChecklists`, `idLabels`, `idList`, `idMembers`, `idMembersVoted`, `idShort`, `labels`, `manualCoverAttachment`, `name`, `pos`, `shortLink`, `shortUrl`, `subscribed`, `url` */
        card_fields?: string;
        /** @description The maximum number of cards to return. Maximum: 1000 */
        cards_limit?: number;
        /** @description The page of results for cards. Maximum: 100 */
        cards_page?: number;
        /** @description Whether to include the parent board with card results */
        card_board?: boolean;
        /** @description Whether to include the parent list with card results */
        card_list?: boolean;
        /** @description Whether to include member objects with card results */
        card_members?: boolean;
        /** @description Whether to include sticker objects with card results */
        card_stickers?: boolean;
        /** @description Whether to include attachment objects with card results. A boolean value (true or false) or cover for only card cover attachments. */
        card_attachments?: string;
        /** @description all or a comma-separated list of billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url, website */
        organization_fields?: string;
        /** @description The maximum number of Workspaces to return. Maximum 1000 */
        organizations_limit?: number;
        /** @description all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username */
        member_fields?: string;
        /** @description The maximum number of members to return. Maximum 1000 */
        members_limit?: number;
        /** @description By default, Trello searches for each word in your query against exactly matching words within Member content. Specifying partial to be true means that we will look for content that starts with any of the words in your query.  If you are looking for a Card titled "My Development Status Report", by default you would need to search for "Development". If you have partial enabled, you will be able to search for "dev" but not "velopment". */
        partial?: boolean;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Member"] | components["schemas"]["Card"] | components["schemas"]["Board"] | components["schemas"]["Organization"])[];
        };
      };
    };
  };
  /**
   * Search for Members 
   * @description Search for Trello members.
   */
  "get-search-members": {
    parameters: {
      query: {
        /** @description Search query 1 to 16384 characters long */
        query: string;
        /** @description The maximum number of results to return. Maximum of 20. */
        limit?: number;
        idBoard?: components["schemas"]["TrelloID"];
        idOrganization?: components["schemas"]["TrelloID"];
        onlyOrgMembers?: boolean;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["MemberFields"])[];
        };
      };
    };
  };
  /**
   * Get a Token 
   * @description Retrieve information about a token.
   */
  "get-tokens-token": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of `dateCreated`, `dateExpires`, `idMember`, `identifier`, `permissions` */
        fields?: "all" | (components["schemas"]["TokenFields"])[];
        /** @description Determines whether to include webhooks. */
        webhooks?: boolean;
      };
      path: {
        token: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
    };
  };
  /**
   * Get Token's Member 
   * @description Retrieve information about a token's owner by token.
   */
  "get-tokens-token-member": {
    parameters: {
      query: {
        /** @description `all` or a comma-separated list of valid fields for [Member Object](/cloud/trello/guides/rest-api/object-definitions/). */
        fields?: "all" | (components["schemas"]["MemberFields"])[];
      };
      path: {
        token: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Member"];
        };
      };
    };
  };
  /**
   * Get Webhooks for Token 
   * @description Retrieve all webhooks created with a Token.
   */
  "get-tokens-token-webhooks": {
    parameters: {
      path: {
        token: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": (components["schemas"]["Webhook"])[];
        };
      };
    };
  };
  /**
   * Create Webhooks for Token 
   * @description Create a new webhook for a Token.
   */
  "post-tokens-token-webhooks": {
    parameters: {
      query: {
        /** @description A description to be displayed when retrieving information about the webhook. */
        description?: string;
        /** @description The URL that the webhook should POST information to. */
        callbackURL: string;
        /** @description ID of the object to create a webhook on. */
        idModel: components["schemas"]["TrelloID"];
      };
      path: {
        token: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Webhook"];
        };
      };
    };
  };
  /**
   * Get a Webhook belonging to a Token 
   * @description Retrieve a webhook created with a Token.
   */
  "get-tokens-token-webhooks-idwebhook": {
    parameters: {
      path: {
        token: string;
        /** @description ID of the [Webhooks](ref:webhooks) to retrieve. */
        idWebhook: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Webhook"];
        };
      };
    };
  };
  /**
   * Update a Webhook created by Token 
   * @description Update a Webhook created by Token
   */
  "tokenstokenwebhooks-1": {
    parameters: {
      query: {
        /** @description A description to be displayed when retrieving information about the webhook. */
        description?: string;
        /** @description The URL that the webhook should `POST` information to. */
        callbackURL?: string;
        /** @description ID of the object that the webhook is on. */
        idModel?: components["schemas"]["TrelloID"];
      };
      path: {
        token: string;
        /** @description ID of the [Webhooks](ref:webhooks) to retrieve. */
        idWebhook: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Delete a Webhook created by Token 
   * @description Delete a webhook created with given token.
   */
  "delete-tokens-token-webhooks-idwebhook": {
    parameters: {
      path: {
        token: string;
        /** @description ID of the [Webhooks](ref:webhooks) to retrieve. */
        idWebhook: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Delete a Token 
   * @description Delete a token.
   */
  "delete-token": {
    parameters: {
      path: {
        token: string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Create a Webhook 
   * @description Create a new webhook.
   */
  "post-webhooks": {
    parameters: {
      query: {
        /** @description A string with a length from `0` to `16384`. */
        description?: string;
        /** @description A valid URL that is reachable with a `HEAD` and `POST` request. */
        callbackURL: string;
        /** @description ID of the model to be monitored */
        idModel: components["schemas"]["TrelloID"];
        /** @description Determines whether the webhook is active and sending `POST` requests. */
        active?: boolean;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Webhook"];
        };
      };
    };
  };
  /**
   * Get a Webhook 
   * @description Get a webhook by ID. You must use the token query parameter and pass in the token the webhook was created under, or else you will encounter a 'webhook does not belong to token' error.
   */
  "get-webhooks-id": {
    parameters: {
      path: {
        /** @description ID of the webhook to retrieve. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Webhook"];
        };
      };
    };
  };
  /**
   * Update a Webhook 
   * @description Update a webhook by ID.
   */
  "put-webhooks-id": {
    parameters: {
      query: {
        /** @description A string with a length from `0` to `16384`. */
        description?: string;
        /** @description A valid URL that is reachable with a `HEAD` and `POST` request. */
        callbackURL?: string;
        /** @description ID of the model to be monitored */
        idModel?: components["schemas"]["TrelloID"];
        /** @description Determines whether the webhook is active and sending `POST` requests. */
        active?: boolean;
      };
      path: {
        /** @description ID of the webhook to retrieve. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Webhook"];
        };
      };
    };
  };
  /**
   * Delete a Webhook 
   * @description Delete a webhook by ID.
   */
  "delete-webhooks-id": {
    parameters: {
      path: {
        /** @description ID of the webhook to retrieve. */
        id: components["schemas"]["TrelloID"];
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  /**
   * Get a field on a Webhook 
   * @description Get a field on a Webhook
   */
  webhooksidfield: {
    parameters: {
      path: {
        /** @description ID of the webhook. */
        id: components["schemas"]["TrelloID"];
        /** @description Field to retrieve. One of: `active`, `callbackURL`, `description`, `idModel` */
        field: "active" | "callbackURL" | "description" | "idModel" | "consecutiveFailures" | "firstConsecutiveFailDate";
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
}
